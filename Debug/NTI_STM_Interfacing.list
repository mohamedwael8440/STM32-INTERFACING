
NTI_STM_Interfacing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003280  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003410  08003410  00013410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003470  08003470  00013470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003474  08003474  00013474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  08003478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
  7 .bss          00003df0  20000018  20000018  00020018  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20003e08  20003e08  00020018  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000ac6f  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001b2d  00000000  00000000  0002acb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000998  00000000  00000000  0002c7e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008c0  00000000  00000000  0002d180  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000040b9  00000000  00000000  0002da40  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000343c  00000000  00000000  00031af9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00034f35  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002764  00000000  00000000  00034fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00037718  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080033f8 	.word	0x080033f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	080033f8 	.word	0x080033f8

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f092 0f00 	teq	r2, #0
 80004ba:	bf14      	ite	ne
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e720      	b.n	8000314 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aedc 	beq.w	80002c2 <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6c1      	b.n	80002c2 <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <Buz_Init>:
 *  Relay	(PC13)
 *  Buttons	(PD2, PA11, PA12, PC0, PC1)
 * */

/* Buzzer */
void Buz_Init(void){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	/* RCC Clock GPIOC */
	RCC->AHB1ENR 	|= RCC_AHB1ENR_GPIOCEN;
 8000a08:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <Buz_Init+0x30>)
 8000a0a:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <Buz_Init+0x30>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f043 0304 	orr.w	r3, r3, #4
 8000a12:	6313      	str	r3, [r2, #48]	; 0x30
	/* PC4 Out */
	GPIOC->MODER &= ~GPIO_MODER_MODER4;
 8000a14:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <Buz_Init+0x34>)
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <Buz_Init+0x34>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a1e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=  GPIO_MODER_MODER4_0;
 8000a20:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <Buz_Init+0x34>)
 8000a22:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <Buz_Init+0x34>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a2a:	6013      	str	r3, [r2, #0]
	Buz_Off();
 8000a2c:	f000 f806 	bl	8000a3c <Buz_Off>
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40020800 	.word	0x40020800

08000a3c <Buz_Off>:
void Buz_On(void){
	GPIOC->ODR |= GPIO_ODR_ODR_4;
}
void Buz_Off(void){
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
	GPIOC->ODR &= ~GPIO_ODR_ODR_4;
 8000a40:	4a05      	ldr	r2, [pc, #20]	; (8000a58 <Buz_Off+0x1c>)
 8000a42:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <Buz_Off+0x1c>)
 8000a44:	695b      	ldr	r3, [r3, #20]
 8000a46:	f023 0310 	bic.w	r3, r3, #16
 8000a4a:	6153      	str	r3, [r2, #20]
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	40020800 	.word	0x40020800

08000a5c <Relay_Init>:
void Buz_Toggle(void){
	GPIOC->ODR ^= GPIO_ODR_ODR_4;
}

/* Relay */
void Relay_Init(void){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	/* RCC Clock GPIOC */
	RCC->AHB1ENR 	|= RCC_AHB1ENR_GPIOCEN;
 8000a60:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <Relay_Init+0x30>)
 8000a62:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <Relay_Init+0x30>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f043 0304 	orr.w	r3, r3, #4
 8000a6a:	6313      	str	r3, [r2, #48]	; 0x30
	/* PC13 Out */
	GPIOC->MODER &= ~GPIO_MODER_MODER13;
 8000a6c:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <Relay_Init+0x34>)
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <Relay_Init+0x34>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000a76:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=  GPIO_MODER_MODER13_0;
 8000a78:	4a05      	ldr	r2, [pc, #20]	; (8000a90 <Relay_Init+0x34>)
 8000a7a:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <Relay_Init+0x34>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a82:	6013      	str	r3, [r2, #0]
	Relay_Off();
 8000a84:	f000 f806 	bl	8000a94 <Relay_Off>
}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020800 	.word	0x40020800

08000a94 <Relay_Off>:
void Relay_On(void){
	GPIOC->ODR |= GPIO_ODR_ODR_13;
}
void Relay_Off(void){
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
	GPIOC->ODR &= ~GPIO_ODR_ODR_13;
 8000a98:	4a05      	ldr	r2, [pc, #20]	; (8000ab0 <Relay_Off+0x1c>)
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <Relay_Off+0x1c>)
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000aa2:	6153      	str	r3, [r2, #20]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40020800 	.word	0x40020800

08000ab4 <Leds_Init>:
}
void Led_Toggle(LED_Type ledNo){
	GPIOC->ODR ^= (1<<ledNo);
}
/* Group of leds */
void Leds_Init(uint8_t ledsMask){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
	/* RCC Clock GPIOC */
	RCC->AHB1ENR 	|= RCC_AHB1ENR_GPIOCEN;
 8000abe:	4a0f      	ldr	r2, [pc, #60]	; (8000afc <Leds_Init+0x48>)
 8000ac0:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <Leds_Init+0x48>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	f043 0304 	orr.w	r3, r3, #4
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOC->MODER &= ~(0xFFFF<<(5*2));
 8000aca:	4a0d      	ldr	r2, [pc, #52]	; (8000b00 <Leds_Init+0x4c>)
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <Leds_Init+0x4c>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8000ad4:	f423 337f 	bic.w	r3, r3, #261120	; 0x3fc00
 8000ad8:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=  (0x5555<<(5*2));
 8000ada:	4a09      	ldr	r2, [pc, #36]	; (8000b00 <Leds_Init+0x4c>)
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <Leds_Init+0x4c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f043 73aa 	orr.w	r3, r3, #22282240	; 0x1540000
 8000ae4:	f443 33aa 	orr.w	r3, r3, #87040	; 0x15400
 8000ae8:	6013      	str	r3, [r2, #0]
	Leds_Off(ledsMask);
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f000 f809 	bl	8000b04 <Leds_Off>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020800 	.word	0x40020800

08000b04 <Leds_Off>:
void Leds_On(uint8_t ledsMask){
	GPIOC->ODR |= (ledsMask<<5);
}
void Leds_Off(uint8_t ledsMask){
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
	GPIOC->ODR &= ~(ledsMask<<5);
 8000b0e:	4907      	ldr	r1, [pc, #28]	; (8000b2c <Leds_Off+0x28>)
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <Leds_Off+0x28>)
 8000b12:	695b      	ldr	r3, [r3, #20]
 8000b14:	79fa      	ldrb	r2, [r7, #7]
 8000b16:	0152      	lsls	r2, r2, #5
 8000b18:	43d2      	mvns	r2, r2
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	614b      	str	r3, [r1, #20]
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	40020800 	.word	0x40020800

08000b30 <Btn_Init>:
void Leds_Toggle(uint8_t ledsMask){
	GPIOC->ODR ^= (ledsMask<<5);
}

/* Buttons	(PD2 C, PA11 R, PA12 L, PC0 D, PC1 U)*/
void Btn_Init(BTN_Type btnNo){
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
	switch (btnNo) {
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	2b04      	cmp	r3, #4
 8000b3e:	f200 808a 	bhi.w	8000c56 <Btn_Init+0x126>
 8000b42:	a201      	add	r2, pc, #4	; (adr r2, 8000b48 <Btn_Init+0x18>)
 8000b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b48:	08000b5d 	.word	0x08000b5d
 8000b4c:	08000bc1 	.word	0x08000bc1
 8000b50:	08000b8f 	.word	0x08000b8f
 8000b54:	08000bf3 	.word	0x08000bf3
 8000b58:	08000c25 	.word	0x08000c25
	case BTN_CENTER:
		RCC->AHB1ENR 	|= RCC_AHB1ENR_GPIODEN;
 8000b5c:	4a41      	ldr	r2, [pc, #260]	; (8000c64 <Btn_Init+0x134>)
 8000b5e:	4b41      	ldr	r3, [pc, #260]	; (8000c64 <Btn_Init+0x134>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f043 0308 	orr.w	r3, r3, #8
 8000b66:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOD->MODER	&= ~GPIO_MODER_MODER2;
 8000b68:	4a3f      	ldr	r2, [pc, #252]	; (8000c68 <Btn_Init+0x138>)
 8000b6a:	4b3f      	ldr	r3, [pc, #252]	; (8000c68 <Btn_Init+0x138>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000b72:	6013      	str	r3, [r2, #0]
		GPIOD->PUPDR	&= ~GPIO_PUPDR_PUPDR2;
 8000b74:	4a3c      	ldr	r2, [pc, #240]	; (8000c68 <Btn_Init+0x138>)
 8000b76:	4b3c      	ldr	r3, [pc, #240]	; (8000c68 <Btn_Init+0x138>)
 8000b78:	68db      	ldr	r3, [r3, #12]
 8000b7a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000b7e:	60d3      	str	r3, [r2, #12]
		GPIOD->PUPDR	|=  GPIO_PUPDR_PUPDR2_0;
 8000b80:	4a39      	ldr	r2, [pc, #228]	; (8000c68 <Btn_Init+0x138>)
 8000b82:	4b39      	ldr	r3, [pc, #228]	; (8000c68 <Btn_Init+0x138>)
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	f043 0310 	orr.w	r3, r3, #16
 8000b8a:	60d3      	str	r3, [r2, #12]
		break;
 8000b8c:	e064      	b.n	8000c58 <Btn_Init+0x128>
	case BTN_LEFT:
		RCC->AHB1ENR 	|= RCC_AHB1ENR_GPIOAEN;
 8000b8e:	4a35      	ldr	r2, [pc, #212]	; (8000c64 <Btn_Init+0x134>)
 8000b90:	4b34      	ldr	r3, [pc, #208]	; (8000c64 <Btn_Init+0x134>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOA->MODER	&= ~GPIO_MODER_MODER12;
 8000b9a:	4a34      	ldr	r2, [pc, #208]	; (8000c6c <Btn_Init+0x13c>)
 8000b9c:	4b33      	ldr	r3, [pc, #204]	; (8000c6c <Btn_Init+0x13c>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000ba4:	6013      	str	r3, [r2, #0]
		GPIOA->PUPDR	&= ~GPIO_PUPDR_PUPDR12;
 8000ba6:	4a31      	ldr	r2, [pc, #196]	; (8000c6c <Btn_Init+0x13c>)
 8000ba8:	4b30      	ldr	r3, [pc, #192]	; (8000c6c <Btn_Init+0x13c>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000bb0:	60d3      	str	r3, [r2, #12]
		GPIOA->PUPDR	|=  GPIO_PUPDR_PUPDR12_0;
 8000bb2:	4a2e      	ldr	r2, [pc, #184]	; (8000c6c <Btn_Init+0x13c>)
 8000bb4:	4b2d      	ldr	r3, [pc, #180]	; (8000c6c <Btn_Init+0x13c>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bbc:	60d3      	str	r3, [r2, #12]
		break;
 8000bbe:	e04b      	b.n	8000c58 <Btn_Init+0x128>
	case BTN_RIGHT:
		RCC->AHB1ENR 	|= RCC_AHB1ENR_GPIOAEN;
 8000bc0:	4a28      	ldr	r2, [pc, #160]	; (8000c64 <Btn_Init+0x134>)
 8000bc2:	4b28      	ldr	r3, [pc, #160]	; (8000c64 <Btn_Init+0x134>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f043 0301 	orr.w	r3, r3, #1
 8000bca:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOA->MODER	&= ~GPIO_MODER_MODER11;
 8000bcc:	4a27      	ldr	r2, [pc, #156]	; (8000c6c <Btn_Init+0x13c>)
 8000bce:	4b27      	ldr	r3, [pc, #156]	; (8000c6c <Btn_Init+0x13c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000bd6:	6013      	str	r3, [r2, #0]
		GPIOA->PUPDR	&= ~GPIO_PUPDR_PUPDR11;
 8000bd8:	4a24      	ldr	r2, [pc, #144]	; (8000c6c <Btn_Init+0x13c>)
 8000bda:	4b24      	ldr	r3, [pc, #144]	; (8000c6c <Btn_Init+0x13c>)
 8000bdc:	68db      	ldr	r3, [r3, #12]
 8000bde:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000be2:	60d3      	str	r3, [r2, #12]
		GPIOA->PUPDR	|=  GPIO_PUPDR_PUPDR11_0;
 8000be4:	4a21      	ldr	r2, [pc, #132]	; (8000c6c <Btn_Init+0x13c>)
 8000be6:	4b21      	ldr	r3, [pc, #132]	; (8000c6c <Btn_Init+0x13c>)
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bee:	60d3      	str	r3, [r2, #12]
		break;
 8000bf0:	e032      	b.n	8000c58 <Btn_Init+0x128>
	case BTN_UP:
		RCC->AHB1ENR 	|= RCC_AHB1ENR_GPIOCEN;
 8000bf2:	4a1c      	ldr	r2, [pc, #112]	; (8000c64 <Btn_Init+0x134>)
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <Btn_Init+0x134>)
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf8:	f043 0304 	orr.w	r3, r3, #4
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOC->MODER	&= ~GPIO_MODER_MODER1;
 8000bfe:	4a1c      	ldr	r2, [pc, #112]	; (8000c70 <Btn_Init+0x140>)
 8000c00:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <Btn_Init+0x140>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f023 030c 	bic.w	r3, r3, #12
 8000c08:	6013      	str	r3, [r2, #0]
		GPIOC->PUPDR	&= ~GPIO_PUPDR_PUPDR1;
 8000c0a:	4a19      	ldr	r2, [pc, #100]	; (8000c70 <Btn_Init+0x140>)
 8000c0c:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <Btn_Init+0x140>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	f023 030c 	bic.w	r3, r3, #12
 8000c14:	60d3      	str	r3, [r2, #12]
		GPIOC->PUPDR	|=  GPIO_PUPDR_PUPDR1_0;
 8000c16:	4a16      	ldr	r2, [pc, #88]	; (8000c70 <Btn_Init+0x140>)
 8000c18:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <Btn_Init+0x140>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	f043 0304 	orr.w	r3, r3, #4
 8000c20:	60d3      	str	r3, [r2, #12]
		break;
 8000c22:	e019      	b.n	8000c58 <Btn_Init+0x128>
	case BTN_DOWN:
		RCC->AHB1ENR 	|= RCC_AHB1ENR_GPIOCEN;
 8000c24:	4a0f      	ldr	r2, [pc, #60]	; (8000c64 <Btn_Init+0x134>)
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <Btn_Init+0x134>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f043 0304 	orr.w	r3, r3, #4
 8000c2e:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOC->MODER	&= ~GPIO_MODER_MODER0;
 8000c30:	4a0f      	ldr	r2, [pc, #60]	; (8000c70 <Btn_Init+0x140>)
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <Btn_Init+0x140>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f023 0303 	bic.w	r3, r3, #3
 8000c3a:	6013      	str	r3, [r2, #0]
		GPIOC->PUPDR	&= ~GPIO_PUPDR_PUPDR0;
 8000c3c:	4a0c      	ldr	r2, [pc, #48]	; (8000c70 <Btn_Init+0x140>)
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <Btn_Init+0x140>)
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	f023 0303 	bic.w	r3, r3, #3
 8000c46:	60d3      	str	r3, [r2, #12]
		GPIOC->PUPDR	|=  GPIO_PUPDR_PUPDR0_0;
 8000c48:	4a09      	ldr	r2, [pc, #36]	; (8000c70 <Btn_Init+0x140>)
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <Btn_Init+0x140>)
 8000c4c:	68db      	ldr	r3, [r3, #12]
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	60d3      	str	r3, [r2, #12]
		break;
 8000c54:	e000      	b.n	8000c58 <Btn_Init+0x128>
	default:
		break;
 8000c56:	bf00      	nop
	}
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020c00 	.word	0x40020c00
 8000c6c:	40020000 	.word	0x40020000
 8000c70:	40020800 	.word	0x40020800

08000c74 <EXTI0_IRQHandler>:
	default:
		break;
	}
	return (result == 0);
}
void EXTI0_IRQHandler(void){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
	EXTI->PR	|=  EXTI_PR_PR0;
 8000c78:	4a05      	ldr	r2, [pc, #20]	; (8000c90 <EXTI0_IRQHandler+0x1c>)
 8000c7a:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <EXTI0_IRQHandler+0x1c>)
 8000c7c:	695b      	ldr	r3, [r3, #20]
 8000c7e:	f043 0301 	orr.w	r3, r3, #1
 8000c82:	6153      	str	r3, [r2, #20]
	handler_down();
 8000c84:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <EXTI0_IRQHandler+0x20>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4798      	blx	r3
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40013c00 	.word	0x40013c00
 8000c94:	20003e00 	.word	0x20003e00

08000c98 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	EXTI->PR	|=  EXTI_PR_PR1;
 8000c9c:	4a05      	ldr	r2, [pc, #20]	; (8000cb4 <EXTI1_IRQHandler+0x1c>)
 8000c9e:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <EXTI1_IRQHandler+0x1c>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	f043 0302 	orr.w	r3, r3, #2
 8000ca6:	6153      	str	r3, [r2, #20]
	handler_up();
 8000ca8:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <EXTI1_IRQHandler+0x20>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4798      	blx	r3
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40013c00 	.word	0x40013c00
 8000cb8:	20003df4 	.word	0x20003df4

08000cbc <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void){
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	EXTI->PR	|=  EXTI_PR_PR2;
 8000cc0:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <EXTI2_IRQHandler+0x1c>)
 8000cc2:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <EXTI2_IRQHandler+0x1c>)
 8000cc4:	695b      	ldr	r3, [r3, #20]
 8000cc6:	f043 0304 	orr.w	r3, r3, #4
 8000cca:	6153      	str	r3, [r2, #20]
	handler_center();
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <EXTI2_IRQHandler+0x20>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4798      	blx	r3
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40013c00 	.word	0x40013c00
 8000cdc:	20003df8 	.word	0x20003df8

08000ce0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR11){
 8000ce4:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <EXTI15_10_IRQHandler+0x48>)
 8000ce6:	695b      	ldr	r3, [r3, #20]
 8000ce8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d009      	beq.n	8000d04 <EXTI15_10_IRQHandler+0x24>
		EXTI->PR	|=  EXTI_PR_PR11;
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	; (8000d28 <EXTI15_10_IRQHandler+0x48>)
 8000cf2:	4b0d      	ldr	r3, [pc, #52]	; (8000d28 <EXTI15_10_IRQHandler+0x48>)
 8000cf4:	695b      	ldr	r3, [r3, #20]
 8000cf6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cfa:	6153      	str	r3, [r2, #20]
		handler_right();
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <EXTI15_10_IRQHandler+0x4c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4798      	blx	r3
	}
	else if(EXTI->PR & EXTI_PR_PR12){
		EXTI->PR	|=  EXTI_PR_PR12;
		handler_left();
	}
}
 8000d02:	e00e      	b.n	8000d22 <EXTI15_10_IRQHandler+0x42>
	else if(EXTI->PR & EXTI_PR_PR12){
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <EXTI15_10_IRQHandler+0x48>)
 8000d06:	695b      	ldr	r3, [r3, #20]
 8000d08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d008      	beq.n	8000d22 <EXTI15_10_IRQHandler+0x42>
		EXTI->PR	|=  EXTI_PR_PR12;
 8000d10:	4a05      	ldr	r2, [pc, #20]	; (8000d28 <EXTI15_10_IRQHandler+0x48>)
 8000d12:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <EXTI15_10_IRQHandler+0x48>)
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d1a:	6153      	str	r3, [r2, #20]
		handler_left();
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <EXTI15_10_IRQHandler+0x50>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4798      	blx	r3
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40013c00 	.word	0x40013c00
 8000d2c:	20003dfc 	.word	0x20003dfc
 8000d30:	20003df0 	.word	0x20003df0

08000d34 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000d38:	4a12      	ldr	r2, [pc, #72]	; (8000d84 <RCC_DeInit+0x50>)
 8000d3a:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <RCC_DeInit+0x50>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f043 0301 	orr.w	r3, r3, #1
 8000d42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <RCC_DeInit+0x50>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 8000d4a:	4a0e      	ldr	r2, [pc, #56]	; (8000d84 <RCC_DeInit+0x50>)
 8000d4c:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <RCC_DeInit+0x50>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 8000d54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d58:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <RCC_DeInit+0x50>)
 8000d5c:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <RCC_DeInit+0x54>)
 8000d5e:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000d60:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <RCC_DeInit+0x50>)
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <RCC_DeInit+0x58>)
 8000d64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000d68:	4a06      	ldr	r2, [pc, #24]	; (8000d84 <RCC_DeInit+0x50>)
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <RCC_DeInit+0x50>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d72:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <RCC_DeInit+0x50>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	40023800 	.word	0x40023800
 8000d88:	24003010 	.word	0x24003010
 8000d8c:	20003000 	.word	0x20003000

08000d90 <TIM1_CC_IRQHandler>:



volatile uint32_t pulse_width = 0;
static volatile uint8_t  edge_state  = 0; /* 0: Rising, 1: Falling */
void TIM1_CC_IRQHandler(void){
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
	TIM1->SR &= ~TIM_SR_CC1IF;
 8000d94:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <TIM1_CC_IRQHandler+0x50>)
 8000d96:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <TIM1_CC_IRQHandler+0x50>)
 8000d98:	8a1b      	ldrh	r3, [r3, #16]
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	f023 0302 	bic.w	r3, r3, #2
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	8213      	strh	r3, [r2, #16]
	if(edge_state == 0){
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <TIM1_CC_IRQHandler+0x54>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d106      	bne.n	8000dbc <TIM1_CC_IRQHandler+0x2c>
		/* Rising */
		TIM1->CNT = 0;
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <TIM1_CC_IRQHandler+0x50>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	625a      	str	r2, [r3, #36]	; 0x24
		edge_state = 1;
 8000db4:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <TIM1_CC_IRQHandler+0x54>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]
	}else if(edge_state == 1){
		/* Falling */
		pulse_width = TIM1->CCR1;
		edge_state = 0;
	}
}
 8000dba:	e00b      	b.n	8000dd4 <TIM1_CC_IRQHandler+0x44>
	}else if(edge_state == 1){
 8000dbc:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <TIM1_CC_IRQHandler+0x54>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d106      	bne.n	8000dd4 <TIM1_CC_IRQHandler+0x44>
		pulse_width = TIM1->CCR1;
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <TIM1_CC_IRQHandler+0x50>)
 8000dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dca:	4a07      	ldr	r2, [pc, #28]	; (8000de8 <TIM1_CC_IRQHandler+0x58>)
 8000dcc:	6013      	str	r3, [r2, #0]
		edge_state = 0;
 8000dce:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <TIM1_CC_IRQHandler+0x54>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	701a      	strb	r2, [r3, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	40010000 	.word	0x40010000
 8000de4:	20000038 	.word	0x20000038
 8000de8:	20000034 	.word	0x20000034

08000dec <TIM3_IRQHandler>:
void TIM3_IRQHandler(void){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	if(TIM3->SR & TIM_SR_UIF){
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <TIM3_IRQHandler+0x2c>)
 8000df2:	8a1b      	ldrh	r3, [r3, #16]
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d00a      	beq.n	8000e14 <TIM3_IRQHandler+0x28>
		TIM3->SR &= ~TIM_SR_UIF;
 8000dfe:	4a06      	ldr	r2, [pc, #24]	; (8000e18 <TIM3_IRQHandler+0x2c>)
 8000e00:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <TIM3_IRQHandler+0x2c>)
 8000e02:	8a1b      	ldrh	r3, [r3, #16]
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	f023 0301 	bic.w	r3, r3, #1
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	8213      	strh	r3, [r2, #16]
		notifyHandle();
 8000e0e:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <TIM3_IRQHandler+0x30>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4798      	blx	r3
		//TIM3->CR1	&= ~TIM_CR1_CEN;
	}
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40000400 	.word	0x40000400
 8000e1c:	20003e04 	.word	0x20003e04

08000e20 <Uart_Init>:
 */

#include "uart.h"

/* UART2 */
void Uart_Init(USART_TypeDef* uart, uint32_t baudrate){
 8000e20:	b5b0      	push	{r4, r5, r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
	uint8_t frac;
	uint16_t integ;
	float UARTDIV;

	if(uart == USART2){
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	4a87      	ldr	r2, [pc, #540]	; (800104c <Uart_Init+0x22c>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d13c      	bne.n	8000eac <Uart_Init+0x8c>
		RCC->AHB1ENR	|=RCC_AHB1ENR_GPIOAEN;
 8000e32:	4a87      	ldr	r2, [pc, #540]	; (8001050 <Uart_Init+0x230>)
 8000e34:	4b86      	ldr	r3, [pc, #536]	; (8001050 <Uart_Init+0x230>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOA->MODER	&= ~(3<<(2*2));
 8000e3e:	4a85      	ldr	r2, [pc, #532]	; (8001054 <Uart_Init+0x234>)
 8000e40:	4b84      	ldr	r3, [pc, #528]	; (8001054 <Uart_Init+0x234>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e48:	6013      	str	r3, [r2, #0]
		GPIOA->MODER	&= ~(3<<(3*2));
 8000e4a:	4a82      	ldr	r2, [pc, #520]	; (8001054 <Uart_Init+0x234>)
 8000e4c:	4b81      	ldr	r3, [pc, #516]	; (8001054 <Uart_Init+0x234>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000e54:	6013      	str	r3, [r2, #0]
		GPIOA->MODER	|= (2<<(2*2));
 8000e56:	4a7f      	ldr	r2, [pc, #508]	; (8001054 <Uart_Init+0x234>)
 8000e58:	4b7e      	ldr	r3, [pc, #504]	; (8001054 <Uart_Init+0x234>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f043 0320 	orr.w	r3, r3, #32
 8000e60:	6013      	str	r3, [r2, #0]
		GPIOA->MODER	|= (2<<(3*2));
 8000e62:	4a7c      	ldr	r2, [pc, #496]	; (8001054 <Uart_Init+0x234>)
 8000e64:	4b7b      	ldr	r3, [pc, #492]	; (8001054 <Uart_Init+0x234>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e6c:	6013      	str	r3, [r2, #0]

		GPIOA->AFR[0]	&= ~(0xF<<(2*4));
 8000e6e:	4a79      	ldr	r2, [pc, #484]	; (8001054 <Uart_Init+0x234>)
 8000e70:	4b78      	ldr	r3, [pc, #480]	; (8001054 <Uart_Init+0x234>)
 8000e72:	6a1b      	ldr	r3, [r3, #32]
 8000e74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e78:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0]	&= ~(0xF<<(3*4));
 8000e7a:	4a76      	ldr	r2, [pc, #472]	; (8001054 <Uart_Init+0x234>)
 8000e7c:	4b75      	ldr	r3, [pc, #468]	; (8001054 <Uart_Init+0x234>)
 8000e7e:	6a1b      	ldr	r3, [r3, #32]
 8000e80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000e84:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0]	|= (0x7<<(2*4));
 8000e86:	4a73      	ldr	r2, [pc, #460]	; (8001054 <Uart_Init+0x234>)
 8000e88:	4b72      	ldr	r3, [pc, #456]	; (8001054 <Uart_Init+0x234>)
 8000e8a:	6a1b      	ldr	r3, [r3, #32]
 8000e8c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000e90:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0]	|= (0x7<<(3*4));
 8000e92:	4a70      	ldr	r2, [pc, #448]	; (8001054 <Uart_Init+0x234>)
 8000e94:	4b6f      	ldr	r3, [pc, #444]	; (8001054 <Uart_Init+0x234>)
 8000e96:	6a1b      	ldr	r3, [r3, #32]
 8000e98:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000e9c:	6213      	str	r3, [r2, #32]
		RCC->APB1ENR	|= RCC_APB1ENR_USART2EN;
 8000e9e:	4a6c      	ldr	r2, [pc, #432]	; (8001050 <Uart_Init+0x230>)
 8000ea0:	4b6b      	ldr	r3, [pc, #428]	; (8001050 <Uart_Init+0x230>)
 8000ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eaa:	e080      	b.n	8000fae <Uart_Init+0x18e>
	}else if(uart == USART1){
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4a6a      	ldr	r2, [pc, #424]	; (8001058 <Uart_Init+0x238>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d13c      	bne.n	8000f2e <Uart_Init+0x10e>
		RCC->AHB1ENR	|=RCC_AHB1ENR_GPIOAEN;
 8000eb4:	4a66      	ldr	r2, [pc, #408]	; (8001050 <Uart_Init+0x230>)
 8000eb6:	4b66      	ldr	r3, [pc, #408]	; (8001050 <Uart_Init+0x230>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOA->MODER	&= ~(3<<(9*2));
 8000ec0:	4a64      	ldr	r2, [pc, #400]	; (8001054 <Uart_Init+0x234>)
 8000ec2:	4b64      	ldr	r3, [pc, #400]	; (8001054 <Uart_Init+0x234>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000eca:	6013      	str	r3, [r2, #0]
		GPIOA->MODER	&= ~(3<<(10*2));
 8000ecc:	4a61      	ldr	r2, [pc, #388]	; (8001054 <Uart_Init+0x234>)
 8000ece:	4b61      	ldr	r3, [pc, #388]	; (8001054 <Uart_Init+0x234>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000ed6:	6013      	str	r3, [r2, #0]
		GPIOA->MODER	|= (2<<(9*2));
 8000ed8:	4a5e      	ldr	r2, [pc, #376]	; (8001054 <Uart_Init+0x234>)
 8000eda:	4b5e      	ldr	r3, [pc, #376]	; (8001054 <Uart_Init+0x234>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ee2:	6013      	str	r3, [r2, #0]
		GPIOA->MODER	|= (2<<(10*2));
 8000ee4:	4a5b      	ldr	r2, [pc, #364]	; (8001054 <Uart_Init+0x234>)
 8000ee6:	4b5b      	ldr	r3, [pc, #364]	; (8001054 <Uart_Init+0x234>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eee:	6013      	str	r3, [r2, #0]

		GPIOA->AFR[1]	&= ~(0xF<<(1*4));
 8000ef0:	4a58      	ldr	r2, [pc, #352]	; (8001054 <Uart_Init+0x234>)
 8000ef2:	4b58      	ldr	r3, [pc, #352]	; (8001054 <Uart_Init+0x234>)
 8000ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000efa:	6253      	str	r3, [r2, #36]	; 0x24
		GPIOA->AFR[1]	&= ~(0xF<<(2*4));
 8000efc:	4a55      	ldr	r2, [pc, #340]	; (8001054 <Uart_Init+0x234>)
 8000efe:	4b55      	ldr	r3, [pc, #340]	; (8001054 <Uart_Init+0x234>)
 8000f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f02:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000f06:	6253      	str	r3, [r2, #36]	; 0x24
		GPIOA->AFR[1]	|= (0x7<<(1*4));
 8000f08:	4a52      	ldr	r2, [pc, #328]	; (8001054 <Uart_Init+0x234>)
 8000f0a:	4b52      	ldr	r3, [pc, #328]	; (8001054 <Uart_Init+0x234>)
 8000f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000f12:	6253      	str	r3, [r2, #36]	; 0x24
		GPIOA->AFR[1]	|= (0x7<<(2*4));
 8000f14:	4a4f      	ldr	r2, [pc, #316]	; (8001054 <Uart_Init+0x234>)
 8000f16:	4b4f      	ldr	r3, [pc, #316]	; (8001054 <Uart_Init+0x234>)
 8000f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000f1e:	6253      	str	r3, [r2, #36]	; 0x24
		RCC->APB2ENR	|= RCC_APB2ENR_USART1EN;
 8000f20:	4a4b      	ldr	r2, [pc, #300]	; (8001050 <Uart_Init+0x230>)
 8000f22:	4b4b      	ldr	r3, [pc, #300]	; (8001050 <Uart_Init+0x230>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	f043 0310 	orr.w	r3, r3, #16
 8000f2a:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2c:	e03f      	b.n	8000fae <Uart_Init+0x18e>

	}else if(uart == USART6){
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	4a4a      	ldr	r2, [pc, #296]	; (800105c <Uart_Init+0x23c>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d13b      	bne.n	8000fae <Uart_Init+0x18e>
		RCC->AHB1ENR	|=RCC_AHB1ENR_GPIOCEN;
 8000f36:	4a46      	ldr	r2, [pc, #280]	; (8001050 <Uart_Init+0x230>)
 8000f38:	4b45      	ldr	r3, [pc, #276]	; (8001050 <Uart_Init+0x230>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOA->MODER	&= ~(3<<(6*2));
 8000f42:	4a44      	ldr	r2, [pc, #272]	; (8001054 <Uart_Init+0x234>)
 8000f44:	4b43      	ldr	r3, [pc, #268]	; (8001054 <Uart_Init+0x234>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f4c:	6013      	str	r3, [r2, #0]
		GPIOA->MODER	&= ~(3<<(7*2));
 8000f4e:	4a41      	ldr	r2, [pc, #260]	; (8001054 <Uart_Init+0x234>)
 8000f50:	4b40      	ldr	r3, [pc, #256]	; (8001054 <Uart_Init+0x234>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f58:	6013      	str	r3, [r2, #0]
		GPIOA->MODER	|= (2<<(6*2));
 8000f5a:	4a3e      	ldr	r2, [pc, #248]	; (8001054 <Uart_Init+0x234>)
 8000f5c:	4b3d      	ldr	r3, [pc, #244]	; (8001054 <Uart_Init+0x234>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f64:	6013      	str	r3, [r2, #0]
		GPIOA->MODER	|= (2<<(7*2));
 8000f66:	4a3b      	ldr	r2, [pc, #236]	; (8001054 <Uart_Init+0x234>)
 8000f68:	4b3a      	ldr	r3, [pc, #232]	; (8001054 <Uart_Init+0x234>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f70:	6013      	str	r3, [r2, #0]

		GPIOA->AFR[0]	&= ~(0xF<<(6*4));
 8000f72:	4a38      	ldr	r2, [pc, #224]	; (8001054 <Uart_Init+0x234>)
 8000f74:	4b37      	ldr	r3, [pc, #220]	; (8001054 <Uart_Init+0x234>)
 8000f76:	6a1b      	ldr	r3, [r3, #32]
 8000f78:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000f7c:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0]	&= ~(0xF<<(7*4));
 8000f7e:	4a35      	ldr	r2, [pc, #212]	; (8001054 <Uart_Init+0x234>)
 8000f80:	4b34      	ldr	r3, [pc, #208]	; (8001054 <Uart_Init+0x234>)
 8000f82:	6a1b      	ldr	r3, [r3, #32]
 8000f84:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000f88:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0]	|= (0x8<<(6*4));
 8000f8a:	4a32      	ldr	r2, [pc, #200]	; (8001054 <Uart_Init+0x234>)
 8000f8c:	4b31      	ldr	r3, [pc, #196]	; (8001054 <Uart_Init+0x234>)
 8000f8e:	6a1b      	ldr	r3, [r3, #32]
 8000f90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f94:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0]	|= (0x8<<(7*4));
 8000f96:	4a2f      	ldr	r2, [pc, #188]	; (8001054 <Uart_Init+0x234>)
 8000f98:	4b2e      	ldr	r3, [pc, #184]	; (8001054 <Uart_Init+0x234>)
 8000f9a:	6a1b      	ldr	r3, [r3, #32]
 8000f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fa0:	6213      	str	r3, [r2, #32]
		RCC->APB2ENR	|= RCC_APB2ENR_USART6EN;
 8000fa2:	4a2b      	ldr	r2, [pc, #172]	; (8001050 <Uart_Init+0x230>)
 8000fa4:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <Uart_Init+0x230>)
 8000fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa8:	f043 0320 	orr.w	r3, r3, #32
 8000fac:	6453      	str	r3, [r2, #68]	; 0x44

	}

	UARTDIV			= (SystemCoreClock/(16.0*baudrate));
 8000fae:	4b2c      	ldr	r3, [pc, #176]	; (8001060 <Uart_Init+0x240>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fa4e 	bl	8000454 <__aeabi_ui2d>
 8000fb8:	4604      	mov	r4, r0
 8000fba:	460d      	mov	r5, r1
 8000fbc:	68b8      	ldr	r0, [r7, #8]
 8000fbe:	f7ff fa49 	bl	8000454 <__aeabi_ui2d>
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	4b27      	ldr	r3, [pc, #156]	; (8001064 <Uart_Init+0x244>)
 8000fc8:	f7ff faba 	bl	8000540 <__aeabi_dmul>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	4629      	mov	r1, r5
 8000fd4:	f7ff fbde 	bl	8000794 <__aeabi_ddiv>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	460c      	mov	r4, r1
 8000fdc:	4618      	mov	r0, r3
 8000fde:	4621      	mov	r1, r4
 8000fe0:	f7ff fcc0 	bl	8000964 <__aeabi_d2f>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	617b      	str	r3, [r7, #20]
	integ			= (uint16_t)UARTDIV;
 8000fe8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ff0:	edc7 7a01 	vstr	s15, [r7, #4]
 8000ff4:	88bb      	ldrh	r3, [r7, #4]
 8000ff6:	827b      	strh	r3, [r7, #18]
	frac			= (UARTDIV-integ)*16;
 8000ff8:	8a7b      	ldrh	r3, [r7, #18]
 8000ffa:	ee07 3a90 	vmov	s15, r3
 8000ffe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001002:	ed97 7a05 	vldr	s14, [r7, #20]
 8001006:	ee77 7a67 	vsub.f32	s15, s14, s15
 800100a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800100e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001012:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001016:	edc7 7a01 	vstr	s15, [r7, #4]
 800101a:	793b      	ldrb	r3, [r7, #4]
 800101c:	747b      	strb	r3, [r7, #17]
	uart->BRR		=(integ<<4)+frac;
 800101e:	8a7b      	ldrh	r3, [r7, #18]
 8001020:	011b      	lsls	r3, r3, #4
 8001022:	b29a      	uxth	r2, r3
 8001024:	7c7b      	ldrb	r3, [r7, #17]
 8001026:	b29b      	uxth	r3, r3
 8001028:	4413      	add	r3, r2
 800102a:	b29a      	uxth	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	811a      	strh	r2, [r3, #8]

	uart->CR1		|=((USART_CR1_TE)|(USART_CR1_RE)|(USART_CR1_UE));
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	899b      	ldrh	r3, [r3, #12]
 8001034:	b29b      	uxth	r3, r3
 8001036:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800103a:	f043 030c 	orr.w	r3, r3, #12
 800103e:	b29a      	uxth	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	819a      	strh	r2, [r3, #12]

}
 8001044:	bf00      	nop
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bdb0      	pop	{r4, r5, r7, pc}
 800104c:	40004400 	.word	0x40004400
 8001050:	40023800 	.word	0x40023800
 8001054:	40020000 	.word	0x40020000
 8001058:	40011000 	.word	0x40011000
 800105c:	40011400 	.word	0x40011400
 8001060:	20000004 	.word	0x20000004
 8001064:	40300000 	.word	0x40300000

08001068 <Uart_SendByte>:
void Uart_SendByte(USART_TypeDef* uart, uint8_t data){
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	70fb      	strb	r3, [r7, #3]
	while(!(uart->SR &USART_SR_TXE));
 8001074:	bf00      	nop
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	b29b      	uxth	r3, r3
 800107c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001080:	2b00      	cmp	r3, #0
 8001082:	d0f8      	beq.n	8001076 <Uart_SendByte+0xe>
	uart->DR 		= data;
 8001084:	78fb      	ldrb	r3, [r7, #3]
 8001086:	b29a      	uxth	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	809a      	strh	r2, [r3, #4]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <Uart_SendString>:
void Uart_SendString(USART_TypeDef* uart, uint8_t* str){
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
	while(str[i])
 80010a6:	e00a      	b.n	80010be <Uart_SendString+0x26>
	{
		Uart_SendByte(uart,str[i]);
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	4413      	add	r3, r2
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ffd8 	bl	8001068 <Uart_SendByte>
		i++;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	3301      	adds	r3, #1
 80010bc:	60fb      	str	r3, [r7, #12]
	while(str[i])
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4413      	add	r3, r2
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1ee      	bne.n	80010a8 <Uart_SendString+0x10>
	}
}
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80010d6:	f001 fdb5 	bl	8002c44 <xTaskGetSchedulerState>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d001      	beq.n	80010e4 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 80010e0:	f000 fc1a 	bl	8001918 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80010f4:	f001 fa08 	bl	8002508 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80010f8:	4b57      	ldr	r3, [pc, #348]	; (8001258 <pvPortMalloc+0x170>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d101      	bne.n	8001104 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8001100:	f000 f90c 	bl	800131c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001104:	4b55      	ldr	r3, [pc, #340]	; (800125c <pvPortMalloc+0x174>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4013      	ands	r3, r2
 800110c:	2b00      	cmp	r3, #0
 800110e:	f040 808c 	bne.w	800122a <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d01c      	beq.n	8001152 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8001118:	2208      	movs	r2, #8
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	2b00      	cmp	r3, #0
 8001128:	d013      	beq.n	8001152 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f023 0307 	bic.w	r3, r3, #7
 8001130:	3308      	adds	r3, #8
 8001132:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	2b00      	cmp	r3, #0
 800113c:	d009      	beq.n	8001152 <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800113e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001142:	f383 8811 	msr	BASEPRI, r3
 8001146:	f3bf 8f6f 	isb	sy
 800114a:	f3bf 8f4f 	dsb	sy
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	e7fe      	b.n	8001150 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d068      	beq.n	800122a <pvPortMalloc+0x142>
 8001158:	4b41      	ldr	r3, [pc, #260]	; (8001260 <pvPortMalloc+0x178>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	429a      	cmp	r2, r3
 8001160:	d863      	bhi.n	800122a <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001162:	4b40      	ldr	r3, [pc, #256]	; (8001264 <pvPortMalloc+0x17c>)
 8001164:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001166:	4b3f      	ldr	r3, [pc, #252]	; (8001264 <pvPortMalloc+0x17c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800116c:	e004      	b.n	8001178 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001170:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	429a      	cmp	r2, r3
 8001180:	d203      	bcs.n	800118a <pvPortMalloc+0xa2>
 8001182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1f1      	bne.n	800116e <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800118a:	4b33      	ldr	r3, [pc, #204]	; (8001258 <pvPortMalloc+0x170>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001190:	429a      	cmp	r2, r3
 8001192:	d04a      	beq.n	800122a <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001194:	6a3b      	ldr	r3, [r7, #32]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2208      	movs	r2, #8
 800119a:	4413      	add	r3, r2
 800119c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800119e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	6a3b      	ldr	r3, [r7, #32]
 80011a4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80011a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a8:	685a      	ldr	r2, [r3, #4]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	1ad2      	subs	r2, r2, r3
 80011ae:	2308      	movs	r3, #8
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d91e      	bls.n	80011f4 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80011b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4413      	add	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	f003 0307 	and.w	r3, r3, #7
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d009      	beq.n	80011dc <pvPortMalloc+0xf4>
 80011c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011cc:	f383 8811 	msr	BASEPRI, r3
 80011d0:	f3bf 8f6f 	isb	sy
 80011d4:	f3bf 8f4f 	dsb	sy
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	e7fe      	b.n	80011da <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80011dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	1ad2      	subs	r2, r2, r3
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80011e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80011ee:	69b8      	ldr	r0, [r7, #24]
 80011f0:	f000 f8f6 	bl	80013e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80011f4:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <pvPortMalloc+0x178>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	4a18      	ldr	r2, [pc, #96]	; (8001260 <pvPortMalloc+0x178>)
 8001200:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <pvPortMalloc+0x178>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	4b18      	ldr	r3, [pc, #96]	; (8001268 <pvPortMalloc+0x180>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	429a      	cmp	r2, r3
 800120c:	d203      	bcs.n	8001216 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800120e:	4b14      	ldr	r3, [pc, #80]	; (8001260 <pvPortMalloc+0x178>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a15      	ldr	r2, [pc, #84]	; (8001268 <pvPortMalloc+0x180>)
 8001214:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001218:	685a      	ldr	r2, [r3, #4]
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <pvPortMalloc+0x174>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	431a      	orrs	r2, r3
 8001220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001222:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800122a:	f001 f97b 	bl	8002524 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	f003 0307 	and.w	r3, r3, #7
 8001234:	2b00      	cmp	r3, #0
 8001236:	d009      	beq.n	800124c <pvPortMalloc+0x164>
 8001238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800123c:	f383 8811 	msr	BASEPRI, r3
 8001240:	f3bf 8f6f 	isb	sy
 8001244:	f3bf 8f4f 	dsb	sy
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	e7fe      	b.n	800124a <pvPortMalloc+0x162>
	return pvReturn;
 800124c:	69fb      	ldr	r3, [r7, #28]
}
 800124e:	4618      	mov	r0, r3
 8001250:	3728      	adds	r7, #40	; 0x28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20003c44 	.word	0x20003c44
 800125c:	20003c50 	.word	0x20003c50
 8001260:	20003c48 	.word	0x20003c48
 8001264:	20003c3c 	.word	0x20003c3c
 8001268:	20003c4c 	.word	0x20003c4c

0800126c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d046      	beq.n	800130c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800127e:	2308      	movs	r3, #8
 8001280:	425b      	negs	r3, r3
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	4413      	add	r3, r2
 8001286:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	4b20      	ldr	r3, [pc, #128]	; (8001314 <vPortFree+0xa8>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4013      	ands	r3, r2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d109      	bne.n	80012ae <vPortFree+0x42>
 800129a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800129e:	f383 8811 	msr	BASEPRI, r3
 80012a2:	f3bf 8f6f 	isb	sy
 80012a6:	f3bf 8f4f 	dsb	sy
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	e7fe      	b.n	80012ac <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d009      	beq.n	80012ca <vPortFree+0x5e>
 80012b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012ba:	f383 8811 	msr	BASEPRI, r3
 80012be:	f3bf 8f6f 	isb	sy
 80012c2:	f3bf 8f4f 	dsb	sy
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	e7fe      	b.n	80012c8 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <vPortFree+0xa8>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4013      	ands	r3, r2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d019      	beq.n	800130c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d115      	bne.n	800130c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <vPortFree+0xa8>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	43db      	mvns	r3, r3
 80012ea:	401a      	ands	r2, r3
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80012f0:	f001 f90a 	bl	8002508 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <vPortFree+0xac>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4413      	add	r3, r2
 80012fe:	4a06      	ldr	r2, [pc, #24]	; (8001318 <vPortFree+0xac>)
 8001300:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001302:	6938      	ldr	r0, [r7, #16]
 8001304:	f000 f86c 	bl	80013e0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001308:	f001 f90c 	bl	8002524 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800130c:	bf00      	nop
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20003c50 	.word	0x20003c50
 8001318:	20003c48 	.word	0x20003c48

0800131c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001322:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001326:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001328:	4b27      	ldr	r3, [pc, #156]	; (80013c8 <prvHeapInit+0xac>)
 800132a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	2b00      	cmp	r3, #0
 8001334:	d00c      	beq.n	8001350 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	3307      	adds	r3, #7
 800133a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f023 0307 	bic.w	r3, r3, #7
 8001342:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001344:	68ba      	ldr	r2, [r7, #8]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	4a1f      	ldr	r2, [pc, #124]	; (80013c8 <prvHeapInit+0xac>)
 800134c:	4413      	add	r3, r2
 800134e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001354:	4a1d      	ldr	r2, [pc, #116]	; (80013cc <prvHeapInit+0xb0>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <prvHeapInit+0xb0>)
 800135c:	2200      	movs	r2, #0
 800135e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	4413      	add	r3, r2
 8001366:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001368:	2208      	movs	r2, #8
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	1a9b      	subs	r3, r3, r2
 800136e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f023 0307 	bic.w	r3, r3, #7
 8001376:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4a15      	ldr	r2, [pc, #84]	; (80013d0 <prvHeapInit+0xb4>)
 800137c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800137e:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <prvHeapInit+0xb4>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2200      	movs	r2, #0
 8001384:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001386:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <prvHeapInit+0xb4>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	1ad2      	subs	r2, r2, r3
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <prvHeapInit+0xb4>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <prvHeapInit+0xb8>)
 80013aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	4a09      	ldr	r2, [pc, #36]	; (80013d8 <prvHeapInit+0xbc>)
 80013b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <prvHeapInit+0xc0>)
 80013b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80013ba:	601a      	str	r2, [r3, #0]
}
 80013bc:	bf00      	nop
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	2000003c 	.word	0x2000003c
 80013cc:	20003c3c 	.word	0x20003c3c
 80013d0:	20003c44 	.word	0x20003c44
 80013d4:	20003c4c 	.word	0x20003c4c
 80013d8:	20003c48 	.word	0x20003c48
 80013dc:	20003c50 	.word	0x20003c50

080013e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80013e8:	4b28      	ldr	r3, [pc, #160]	; (800148c <prvInsertBlockIntoFreeList+0xac>)
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	e002      	b.n	80013f4 <prvInsertBlockIntoFreeList+0x14>
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d3f7      	bcc.n	80013ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	441a      	add	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	429a      	cmp	r2, r3
 800140e:	d108      	bne.n	8001422 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	685a      	ldr	r2, [r3, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	441a      	add	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	441a      	add	r2, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d118      	bne.n	8001468 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <prvInsertBlockIntoFreeList+0xb0>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	429a      	cmp	r2, r3
 8001440:	d00d      	beq.n	800145e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	441a      	add	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	e008      	b.n	8001470 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <prvInsertBlockIntoFreeList+0xb0>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	e003      	b.n	8001470 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	429a      	cmp	r2, r3
 8001476:	d002      	beq.n	800147e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800147e:	bf00      	nop
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	20003c3c 	.word	0x20003c3c
 8001490:	20003c44 	.word	0x20003c44

08001494 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f103 0208 	add.w	r2, r3, #8
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f04f 32ff 	mov.w	r2, #4294967295
 80014ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f103 0208 	add.w	r2, r3, #8
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f103 0208 	add.w	r2, r3, #8
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80014ee:	b480      	push	{r7}
 80014f0:	b085      	sub	sp, #20
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
 80014f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	601a      	str	r2, [r3, #0]
}
 800152a:	bf00      	nop
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001536:	b480      	push	{r7}
 8001538:	b085      	sub	sp, #20
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800154c:	d103      	bne.n	8001556 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	e00c      	b.n	8001570 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	3308      	adds	r3, #8
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	e002      	b.n	8001564 <vListInsert+0x2e>
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	429a      	cmp	r2, r3
 800156e:	d9f6      	bls.n	800155e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	1c5a      	adds	r2, r3, #1
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	601a      	str	r2, [r3, #0]
}
 800159c:	bf00      	nop
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6892      	ldr	r2, [r2, #8]
 80015be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	6852      	ldr	r2, [r2, #4]
 80015c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	685a      	ldr	r2, [r3, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d103      	bne.n	80015dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	1e5a      	subs	r2, r3, #1
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	3b04      	subs	r3, #4
 800160c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001614:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	3b04      	subs	r3, #4
 800161a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	f023 0201 	bic.w	r2, r3, #1
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	3b04      	subs	r3, #4
 800162a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800162c:	4a0c      	ldr	r2, [pc, #48]	; (8001660 <pxPortInitialiseStack+0x64>)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	3b14      	subs	r3, #20
 8001636:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	3b04      	subs	r3, #4
 8001642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f06f 0202 	mvn.w	r2, #2
 800164a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	3b20      	subs	r3, #32
 8001650:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001652:	68fb      	ldr	r3, [r7, #12]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	08001665 	.word	0x08001665

08001664 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800166a:	4b0c      	ldr	r3, [pc, #48]	; (800169c <prvTaskExitError+0x38>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001672:	d009      	beq.n	8001688 <prvTaskExitError+0x24>
 8001674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001678:	f383 8811 	msr	BASEPRI, r3
 800167c:	f3bf 8f6f 	isb	sy
 8001680:	f3bf 8f4f 	dsb	sy
 8001684:	607b      	str	r3, [r7, #4]
 8001686:	e7fe      	b.n	8001686 <prvTaskExitError+0x22>
 8001688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800168c:	f383 8811 	msr	BASEPRI, r3
 8001690:	f3bf 8f6f 	isb	sy
 8001694:	f3bf 8f4f 	dsb	sy
 8001698:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 800169a:	e7fe      	b.n	800169a <prvTaskExitError+0x36>
 800169c:	20000000 	.word	0x20000000

080016a0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80016a0:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <pxCurrentTCBConst2>)
 80016a2:	6819      	ldr	r1, [r3, #0]
 80016a4:	6808      	ldr	r0, [r1, #0]
 80016a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016aa:	f380 8809 	msr	PSP, r0
 80016ae:	f3bf 8f6f 	isb	sy
 80016b2:	f04f 0000 	mov.w	r0, #0
 80016b6:	f380 8811 	msr	BASEPRI, r0
 80016ba:	4770      	bx	lr
 80016bc:	f3af 8000 	nop.w

080016c0 <pxCurrentTCBConst2>:
 80016c0:	20003c5c 	.word	0x20003c5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80016c4:	bf00      	nop
 80016c6:	bf00      	nop

080016c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80016c8:	4806      	ldr	r0, [pc, #24]	; (80016e4 <prvPortStartFirstTask+0x1c>)
 80016ca:	6800      	ldr	r0, [r0, #0]
 80016cc:	6800      	ldr	r0, [r0, #0]
 80016ce:	f380 8808 	msr	MSP, r0
 80016d2:	b662      	cpsie	i
 80016d4:	b661      	cpsie	f
 80016d6:	f3bf 8f4f 	dsb	sy
 80016da:	f3bf 8f6f 	isb	sy
 80016de:	df00      	svc	0
 80016e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80016e2:	bf00      	nop
 80016e4:	e000ed08 	.word	0xe000ed08

080016e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80016ee:	4b3b      	ldr	r3, [pc, #236]	; (80017dc <xPortStartScheduler+0xf4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a3b      	ldr	r2, [pc, #236]	; (80017e0 <xPortStartScheduler+0xf8>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d109      	bne.n	800170c <xPortStartScheduler+0x24>
 80016f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016fc:	f383 8811 	msr	BASEPRI, r3
 8001700:	f3bf 8f6f 	isb	sy
 8001704:	f3bf 8f4f 	dsb	sy
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	e7fe      	b.n	800170a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800170c:	4b33      	ldr	r3, [pc, #204]	; (80017dc <xPortStartScheduler+0xf4>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a34      	ldr	r2, [pc, #208]	; (80017e4 <xPortStartScheduler+0xfc>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d109      	bne.n	800172a <xPortStartScheduler+0x42>
 8001716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800171a:	f383 8811 	msr	BASEPRI, r3
 800171e:	f3bf 8f6f 	isb	sy
 8001722:	f3bf 8f4f 	dsb	sy
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	e7fe      	b.n	8001728 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800172a:	4b2f      	ldr	r3, [pc, #188]	; (80017e8 <xPortStartScheduler+0x100>)
 800172c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	b2db      	uxtb	r3, r3
 8001734:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	22ff      	movs	r2, #255	; 0xff
 800173a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	b2db      	uxtb	r3, r3
 8001742:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	b2db      	uxtb	r3, r3
 8001748:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4b27      	ldr	r3, [pc, #156]	; (80017ec <xPortStartScheduler+0x104>)
 8001750:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001752:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <xPortStartScheduler+0x108>)
 8001754:	2207      	movs	r2, #7
 8001756:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001758:	e009      	b.n	800176e <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800175a:	4b25      	ldr	r3, [pc, #148]	; (80017f0 <xPortStartScheduler+0x108>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	3b01      	subs	r3, #1
 8001760:	4a23      	ldr	r2, [pc, #140]	; (80017f0 <xPortStartScheduler+0x108>)
 8001762:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	b2db      	uxtb	r3, r3
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	b2db      	uxtb	r3, r3
 800176c:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001776:	2b80      	cmp	r3, #128	; 0x80
 8001778:	d0ef      	beq.n	800175a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800177a:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <xPortStartScheduler+0x108>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	021b      	lsls	r3, r3, #8
 8001780:	4a1b      	ldr	r2, [pc, #108]	; (80017f0 <xPortStartScheduler+0x108>)
 8001782:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001784:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <xPortStartScheduler+0x108>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800178c:	4a18      	ldr	r2, [pc, #96]	; (80017f0 <xPortStartScheduler+0x108>)
 800178e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	b2da      	uxtb	r2, r3
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001798:	4a16      	ldr	r2, [pc, #88]	; (80017f4 <xPortStartScheduler+0x10c>)
 800179a:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <xPortStartScheduler+0x10c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017a2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80017a4:	4a13      	ldr	r2, [pc, #76]	; (80017f4 <xPortStartScheduler+0x10c>)
 80017a6:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <xPortStartScheduler+0x10c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80017ae:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80017b0:	f000 f8d2 	bl	8001958 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80017b4:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <xPortStartScheduler+0x110>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80017ba:	f000 f8e9 	bl	8001990 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80017be:	4a0f      	ldr	r2, [pc, #60]	; (80017fc <xPortStartScheduler+0x114>)
 80017c0:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <xPortStartScheduler+0x114>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80017c8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80017ca:	f7ff ff7d 	bl	80016c8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80017ce:	f7ff ff49 	bl	8001664 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	e000ed00 	.word	0xe000ed00
 80017e0:	410fc271 	.word	0x410fc271
 80017e4:	410fc270 	.word	0x410fc270
 80017e8:	e000e400 	.word	0xe000e400
 80017ec:	20003c54 	.word	0x20003c54
 80017f0:	20003c58 	.word	0x20003c58
 80017f4:	e000ed20 	.word	0xe000ed20
 80017f8:	20000000 	.word	0x20000000
 80017fc:	e000ef34 	.word	0xe000ef34

08001800 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800180a:	f383 8811 	msr	BASEPRI, r3
 800180e:	f3bf 8f6f 	isb	sy
 8001812:	f3bf 8f4f 	dsb	sy
 8001816:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001818:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <vPortEnterCritical+0x54>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	3301      	adds	r3, #1
 800181e:	4a0d      	ldr	r2, [pc, #52]	; (8001854 <vPortEnterCritical+0x54>)
 8001820:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8001822:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <vPortEnterCritical+0x54>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d10e      	bne.n	8001848 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800182a:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <vPortEnterCritical+0x58>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	b2db      	uxtb	r3, r3
 8001830:	2b00      	cmp	r3, #0
 8001832:	d009      	beq.n	8001848 <vPortEnterCritical+0x48>
 8001834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001838:	f383 8811 	msr	BASEPRI, r3
 800183c:	f3bf 8f6f 	isb	sy
 8001840:	f3bf 8f4f 	dsb	sy
 8001844:	603b      	str	r3, [r7, #0]
 8001846:	e7fe      	b.n	8001846 <vPortEnterCritical+0x46>
	}
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	20000000 	.word	0x20000000
 8001858:	e000ed04 	.word	0xe000ed04

0800185c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8001862:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <vPortExitCritical+0x4c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d109      	bne.n	800187e <vPortExitCritical+0x22>
 800186a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800186e:	f383 8811 	msr	BASEPRI, r3
 8001872:	f3bf 8f6f 	isb	sy
 8001876:	f3bf 8f4f 	dsb	sy
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	e7fe      	b.n	800187c <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800187e:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <vPortExitCritical+0x4c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	3b01      	subs	r3, #1
 8001884:	4a08      	ldr	r2, [pc, #32]	; (80018a8 <vPortExitCritical+0x4c>)
 8001886:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001888:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <vPortExitCritical+0x4c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d104      	bne.n	800189a <vPortExitCritical+0x3e>
 8001890:	2300      	movs	r3, #0
 8001892:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	20000000 	.word	0x20000000
 80018ac:	00000000 	.word	0x00000000

080018b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80018b0:	f3ef 8009 	mrs	r0, PSP
 80018b4:	f3bf 8f6f 	isb	sy
 80018b8:	4b15      	ldr	r3, [pc, #84]	; (8001910 <pxCurrentTCBConst>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	f01e 0f10 	tst.w	lr, #16
 80018c0:	bf08      	it	eq
 80018c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80018c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018ca:	6010      	str	r0, [r2, #0]
 80018cc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80018d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80018d4:	f380 8811 	msr	BASEPRI, r0
 80018d8:	f3bf 8f4f 	dsb	sy
 80018dc:	f3bf 8f6f 	isb	sy
 80018e0:	f000 ff78 	bl	80027d4 <vTaskSwitchContext>
 80018e4:	f04f 0000 	mov.w	r0, #0
 80018e8:	f380 8811 	msr	BASEPRI, r0
 80018ec:	bc08      	pop	{r3}
 80018ee:	6819      	ldr	r1, [r3, #0]
 80018f0:	6808      	ldr	r0, [r1, #0]
 80018f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018f6:	f01e 0f10 	tst.w	lr, #16
 80018fa:	bf08      	it	eq
 80018fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001900:	f380 8809 	msr	PSP, r0
 8001904:	f3bf 8f6f 	isb	sy
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	f3af 8000 	nop.w

08001910 <pxCurrentTCBConst>:
 8001910:	20003c5c 	.word	0x20003c5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001914:	bf00      	nop
 8001916:	bf00      	nop

08001918 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
	__asm volatile
 800191e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001922:	f383 8811 	msr	BASEPRI, r3
 8001926:	f3bf 8f6f 	isb	sy
 800192a:	f3bf 8f4f 	dsb	sy
 800192e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001930:	f000 fe94 	bl	800265c <xTaskIncrementTick>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <xPortSysTickHandler+0x3c>)
 800193c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	2300      	movs	r3, #0
 8001944:	603b      	str	r3, [r7, #0]
	__asm volatile
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	e000ed04 	.word	0xe000ed04

08001958 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800195c:	4a08      	ldr	r2, [pc, #32]	; (8001980 <vPortSetupTimerInterrupt+0x28>)
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <vPortSetupTimerInterrupt+0x2c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4909      	ldr	r1, [pc, #36]	; (8001988 <vPortSetupTimerInterrupt+0x30>)
 8001964:	fba1 1303 	umull	r1, r3, r1, r3
 8001968:	099b      	lsrs	r3, r3, #6
 800196a:	3b01      	subs	r3, #1
 800196c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800196e:	4b07      	ldr	r3, [pc, #28]	; (800198c <vPortSetupTimerInterrupt+0x34>)
 8001970:	2207      	movs	r2, #7
 8001972:	601a      	str	r2, [r3, #0]
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000e014 	.word	0xe000e014
 8001984:	20000004 	.word	0x20000004
 8001988:	10624dd3 	.word	0x10624dd3
 800198c:	e000e010 	.word	0xe000e010

08001990 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001990:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80019a0 <vPortEnableVFP+0x10>
 8001994:	6801      	ldr	r1, [r0, #0]
 8001996:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800199a:	6001      	str	r1, [r0, #0]
 800199c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800199e:	bf00      	nop
 80019a0:	e000ed88 	.word	0xe000ed88

080019a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d109      	bne.n	80019cc <xQueueGenericReset+0x28>
	__asm volatile
 80019b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019bc:	f383 8811 	msr	BASEPRI, r3
 80019c0:	f3bf 8f6f 	isb	sy
 80019c4:	f3bf 8f4f 	dsb	sy
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	e7fe      	b.n	80019ca <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80019cc:	f7ff ff18 	bl	8001800 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019d8:	68f9      	ldr	r1, [r7, #12]
 80019da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80019dc:	fb01 f303 	mul.w	r3, r1, r3
 80019e0:	441a      	add	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2200      	movs	r2, #0
 80019ea:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019fc:	3b01      	subs	r3, #1
 80019fe:	68f9      	ldr	r1, [r7, #12]
 8001a00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001a02:	fb01 f303 	mul.w	r3, r1, r3
 8001a06:	441a      	add	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	22ff      	movs	r2, #255	; 0xff
 8001a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	22ff      	movs	r2, #255	; 0xff
 8001a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d114      	bne.n	8001a4c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d01a      	beq.n	8001a60 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	3310      	adds	r3, #16
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 ff4e 	bl	80028d0 <xTaskRemoveFromEventList>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d012      	beq.n	8001a60 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <xQueueGenericReset+0xcc>)
 8001a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	f3bf 8f4f 	dsb	sy
 8001a46:	f3bf 8f6f 	isb	sy
 8001a4a:	e009      	b.n	8001a60 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	3310      	adds	r3, #16
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff fd1f 	bl	8001494 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	3324      	adds	r3, #36	; 0x24
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fd1a 	bl	8001494 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001a60:	f7ff fefc 	bl	800185c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001a64:	2301      	movs	r3, #1
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	e000ed04 	.word	0xe000ed04

08001a74 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	; 0x28
 8001a78:	af02      	add	r7, sp, #8
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d109      	bne.n	8001a9c <xQueueGenericCreate+0x28>
 8001a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a8c:	f383 8811 	msr	BASEPRI, r3
 8001a90:	f3bf 8f6f 	isb	sy
 8001a94:	f3bf 8f4f 	dsb	sy
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	e7fe      	b.n	8001a9a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d102      	bne.n	8001aa8 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
 8001aa6:	e004      	b.n	8001ab2 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	fb02 f303 	mul.w	r3, r2, r3
 8001ab0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	3348      	adds	r3, #72	; 0x48
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fb16 	bl	80010e8 <pvPortMalloc>
 8001abc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00b      	beq.n	8001adc <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	3348      	adds	r3, #72	; 0x48
 8001ac8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001aca:	79fa      	ldrb	r2, [r7, #7]
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	68b9      	ldr	r1, [r7, #8]
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f000 f805 	bl	8001ae6 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8001adc:	69bb      	ldr	r3, [r7, #24]
	}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3720      	adds	r7, #32
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b084      	sub	sp, #16
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
 8001af2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d103      	bne.n	8001b02 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	e002      	b.n	8001b08 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	68ba      	ldr	r2, [r7, #8]
 8001b12:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001b14:	2101      	movs	r1, #1
 8001b16:	69b8      	ldr	r0, [r7, #24]
 8001b18:	f7ff ff44 	bl	80019a4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001b1c:	bf00      	nop
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00e      	beq.n	8001b50 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8001b44:	2300      	movs	r3, #0
 8001b46:	2200      	movs	r2, #0
 8001b48:	2100      	movs	r1, #0
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f81c 	bl	8001b88 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8001b62:	2301      	movs	r3, #1
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	6939      	ldr	r1, [r7, #16]
 8001b70:	6978      	ldr	r0, [r7, #20]
 8001b72:	f7ff ff7f 	bl	8001a74 <xQueueGenericCreate>
 8001b76:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	f7ff ffd3 	bl	8001b24 <prvInitialiseMutex>

		return pxNewQueue;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
	}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08e      	sub	sp, #56	; 0x38
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
 8001b94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001b96:	2300      	movs	r3, #0
 8001b98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d109      	bne.n	8001bb8 <xQueueGenericSend+0x30>
 8001ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ba8:	f383 8811 	msr	BASEPRI, r3
 8001bac:	f3bf 8f6f 	isb	sy
 8001bb0:	f3bf 8f4f 	dsb	sy
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bb6:	e7fe      	b.n	8001bb6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d103      	bne.n	8001bc6 <xQueueGenericSend+0x3e>
 8001bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <xQueueGenericSend+0x42>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <xQueueGenericSend+0x44>
 8001bca:	2300      	movs	r3, #0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d109      	bne.n	8001be4 <xQueueGenericSend+0x5c>
 8001bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bd4:	f383 8811 	msr	BASEPRI, r3
 8001bd8:	f3bf 8f6f 	isb	sy
 8001bdc:	f3bf 8f4f 	dsb	sy
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
 8001be2:	e7fe      	b.n	8001be2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d103      	bne.n	8001bf2 <xQueueGenericSend+0x6a>
 8001bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d101      	bne.n	8001bf6 <xQueueGenericSend+0x6e>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <xQueueGenericSend+0x70>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d109      	bne.n	8001c10 <xQueueGenericSend+0x88>
 8001bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c00:	f383 8811 	msr	BASEPRI, r3
 8001c04:	f3bf 8f6f 	isb	sy
 8001c08:	f3bf 8f4f 	dsb	sy
 8001c0c:	623b      	str	r3, [r7, #32]
 8001c0e:	e7fe      	b.n	8001c0e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001c10:	f001 f818 	bl	8002c44 <xTaskGetSchedulerState>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d102      	bne.n	8001c20 <xQueueGenericSend+0x98>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <xQueueGenericSend+0x9c>
 8001c20:	2301      	movs	r3, #1
 8001c22:	e000      	b.n	8001c26 <xQueueGenericSend+0x9e>
 8001c24:	2300      	movs	r3, #0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d109      	bne.n	8001c3e <xQueueGenericSend+0xb6>
 8001c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c2e:	f383 8811 	msr	BASEPRI, r3
 8001c32:	f3bf 8f6f 	isb	sy
 8001c36:	f3bf 8f4f 	dsb	sy
 8001c3a:	61fb      	str	r3, [r7, #28]
 8001c3c:	e7fe      	b.n	8001c3c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001c3e:	f7ff fddf 	bl	8001800 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d302      	bcc.n	8001c54 <xQueueGenericSend+0xcc>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d129      	bne.n	8001ca8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	68b9      	ldr	r1, [r7, #8]
 8001c58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c5a:	f000 f9a1 	bl	8001fa0 <prvCopyDataToQueue>
 8001c5e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d010      	beq.n	8001c8a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c6a:	3324      	adds	r3, #36	; 0x24
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f000 fe2f 	bl	80028d0 <xTaskRemoveFromEventList>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d013      	beq.n	8001ca0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001c78:	4b3f      	ldr	r3, [pc, #252]	; (8001d78 <xQueueGenericSend+0x1f0>)
 8001c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	f3bf 8f4f 	dsb	sy
 8001c84:	f3bf 8f6f 	isb	sy
 8001c88:	e00a      	b.n	8001ca0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d007      	beq.n	8001ca0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001c90:	4b39      	ldr	r3, [pc, #228]	; (8001d78 <xQueueGenericSend+0x1f0>)
 8001c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	f3bf 8f4f 	dsb	sy
 8001c9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001ca0:	f7ff fddc 	bl	800185c <vPortExitCritical>
				return pdPASS;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e063      	b.n	8001d70 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d103      	bne.n	8001cb6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001cae:	f7ff fdd5 	bl	800185c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	e05c      	b.n	8001d70 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d106      	bne.n	8001cca <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 fe67 	bl	8002994 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001cca:	f7ff fdc7 	bl	800185c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001cce:	f000 fc1b 	bl	8002508 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001cd2:	f7ff fd95 	bl	8001800 <vPortEnterCritical>
 8001cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cdc:	b25b      	sxtb	r3, r3
 8001cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce2:	d103      	bne.n	8001cec <xQueueGenericSend+0x164>
 8001ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001cf2:	b25b      	sxtb	r3, r3
 8001cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf8:	d103      	bne.n	8001d02 <xQueueGenericSend+0x17a>
 8001cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d02:	f7ff fdab 	bl	800185c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001d06:	1d3a      	adds	r2, r7, #4
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	4611      	mov	r1, r2
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 fe64 	bl	80029dc <xTaskCheckForTimeOut>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d124      	bne.n	8001d64 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001d1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d1c:	f000 fa38 	bl	8002190 <prvIsQueueFull>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d018      	beq.n	8001d58 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d28:	3310      	adds	r3, #16
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	4611      	mov	r1, r2
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f000 fdaa 	bl	8002888 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001d34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d36:	f000 f9c3 	bl	80020c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001d3a:	f000 fbf3 	bl	8002524 <xTaskResumeAll>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f47f af7c 	bne.w	8001c3e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8001d46:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <xQueueGenericSend+0x1f0>)
 8001d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	f3bf 8f4f 	dsb	sy
 8001d52:	f3bf 8f6f 	isb	sy
 8001d56:	e772      	b.n	8001c3e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001d58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d5a:	f000 f9b1 	bl	80020c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001d5e:	f000 fbe1 	bl	8002524 <xTaskResumeAll>
 8001d62:	e76c      	b.n	8001c3e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001d64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d66:	f000 f9ab 	bl	80020c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001d6a:	f000 fbdb 	bl	8002524 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001d6e:	2300      	movs	r3, #0
		}
	}
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3738      	adds	r7, #56	; 0x38
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	e000ed04 	.word	0xe000ed04

08001d7c <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08e      	sub	sp, #56	; 0x38
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
 8001d88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d109      	bne.n	8001dac <xQueueGenericReceive+0x30>
 8001d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d9c:	f383 8811 	msr	BASEPRI, r3
 8001da0:	f3bf 8f6f 	isb	sy
 8001da4:	f3bf 8f4f 	dsb	sy
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
 8001daa:	e7fe      	b.n	8001daa <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d103      	bne.n	8001dba <xQueueGenericReceive+0x3e>
 8001db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <xQueueGenericReceive+0x42>
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <xQueueGenericReceive+0x44>
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d109      	bne.n	8001dd8 <xQueueGenericReceive+0x5c>
 8001dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dc8:	f383 8811 	msr	BASEPRI, r3
 8001dcc:	f3bf 8f6f 	isb	sy
 8001dd0:	f3bf 8f4f 	dsb	sy
 8001dd4:	623b      	str	r3, [r7, #32]
 8001dd6:	e7fe      	b.n	8001dd6 <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001dd8:	f000 ff34 	bl	8002c44 <xTaskGetSchedulerState>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d102      	bne.n	8001de8 <xQueueGenericReceive+0x6c>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <xQueueGenericReceive+0x70>
 8001de8:	2301      	movs	r3, #1
 8001dea:	e000      	b.n	8001dee <xQueueGenericReceive+0x72>
 8001dec:	2300      	movs	r3, #0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d109      	bne.n	8001e06 <xQueueGenericReceive+0x8a>
 8001df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df6:	f383 8811 	msr	BASEPRI, r3
 8001dfa:	f3bf 8f6f 	isb	sy
 8001dfe:	f3bf 8f4f 	dsb	sy
 8001e02:	61fb      	str	r3, [r7, #28]
 8001e04:	e7fe      	b.n	8001e04 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001e06:	f7ff fcfb 	bl	8001800 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e0e:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d046      	beq.n	8001ea4 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8001e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001e1c:	68b9      	ldr	r1, [r7, #8]
 8001e1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e20:	f000 f928 	bl	8002074 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d121      	bne.n	8001e6e <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8001e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e2c:	1e5a      	subs	r2, r3, #1
 8001e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e30:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d104      	bne.n	8001e44 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8001e3a:	f001 f81b 	bl	8002e74 <pvTaskIncrementMutexHeldCount>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e42:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d027      	beq.n	8001e9c <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e4e:	3310      	adds	r3, #16
 8001e50:	4618      	mov	r0, r3
 8001e52:	f000 fd3d 	bl	80028d0 <xTaskRemoveFromEventList>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d01f      	beq.n	8001e9c <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8001e5c:	4b4f      	ldr	r3, [pc, #316]	; (8001f9c <xQueueGenericReceive+0x220>)
 8001e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	f3bf 8f4f 	dsb	sy
 8001e68:	f3bf 8f6f 	isb	sy
 8001e6c:	e016      	b.n	8001e9c <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8001e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e72:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00f      	beq.n	8001e9c <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7e:	3324      	adds	r3, #36	; 0x24
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 fd25 	bl	80028d0 <xTaskRemoveFromEventList>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d007      	beq.n	8001e9c <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8001e8c:	4b43      	ldr	r3, [pc, #268]	; (8001f9c <xQueueGenericReceive+0x220>)
 8001e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	f3bf 8f4f 	dsb	sy
 8001e98:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8001e9c:	f7ff fcde 	bl	800185c <vPortExitCritical>
				return pdPASS;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e077      	b.n	8001f94 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d103      	bne.n	8001eb2 <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001eaa:	f7ff fcd7 	bl	800185c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	e070      	b.n	8001f94 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d106      	bne.n	8001ec6 <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001eb8:	f107 0314 	add.w	r3, r7, #20
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f000 fd69 	bl	8002994 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001ec6:	f7ff fcc9 	bl	800185c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001eca:	f000 fb1d 	bl	8002508 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001ece:	f7ff fc97 	bl	8001800 <vPortEnterCritical>
 8001ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ed8:	b25b      	sxtb	r3, r3
 8001eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ede:	d103      	bne.n	8001ee8 <xQueueGenericReceive+0x16c>
 8001ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001eee:	b25b      	sxtb	r3, r3
 8001ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef4:	d103      	bne.n	8001efe <xQueueGenericReceive+0x182>
 8001ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001efe:	f7ff fcad 	bl	800185c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001f02:	1d3a      	adds	r2, r7, #4
 8001f04:	f107 0314 	add.w	r3, r7, #20
 8001f08:	4611      	mov	r1, r2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 fd66 	bl	80029dc <xTaskCheckForTimeOut>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d131      	bne.n	8001f7a <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001f16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f18:	f000 f924 	bl	8002164 <prvIsQueueEmpty>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d025      	beq.n	8001f6e <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d108      	bne.n	8001f3c <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 8001f2a:	f7ff fc69 	bl	8001800 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8001f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 fea4 	bl	8002c80 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8001f38:	f7ff fc90 	bl	800185c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f3e:	3324      	adds	r3, #36	; 0x24
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	4611      	mov	r1, r2
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 fc9f 	bl	8002888 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001f4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f4c:	f000 f8b8 	bl	80020c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001f50:	f000 fae8 	bl	8002524 <xTaskResumeAll>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f47f af55 	bne.w	8001e06 <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 8001f5c:	4b0f      	ldr	r3, [pc, #60]	; (8001f9c <xQueueGenericReceive+0x220>)
 8001f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	f3bf 8f4f 	dsb	sy
 8001f68:	f3bf 8f6f 	isb	sy
 8001f6c:	e74b      	b.n	8001e06 <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001f6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f70:	f000 f8a6 	bl	80020c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001f74:	f000 fad6 	bl	8002524 <xTaskResumeAll>
 8001f78:	e745      	b.n	8001e06 <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8001f7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f7c:	f000 f8a0 	bl	80020c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001f80:	f000 fad0 	bl	8002524 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001f84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f86:	f000 f8ed 	bl	8002164 <prvIsQueueEmpty>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f43f af3a 	beq.w	8001e06 <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001f92:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3738      	adds	r7, #56	; 0x38
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	e000ed04 	.word	0xe000ed04

08001fa0 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10d      	bne.n	8001fda <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d14d      	bne.n	8002062 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 fece 	bl	8002d6c <xTaskPriorityDisinherit>
 8001fd0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	605a      	str	r2, [r3, #4]
 8001fd8:	e043      	b.n	8002062 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d119      	bne.n	8002014 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6898      	ldr	r0, [r3, #8]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	461a      	mov	r2, r3
 8001fea:	68b9      	ldr	r1, [r7, #8]
 8001fec:	f001 f9f8 	bl	80033e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	441a      	add	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	429a      	cmp	r2, r3
 8002008:	d32b      	bcc.n	8002062 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	e026      	b.n	8002062 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	68d8      	ldr	r0, [r3, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	461a      	mov	r2, r3
 800201e:	68b9      	ldr	r1, [r7, #8]
 8002020:	f001 f9de 	bl	80033e0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	68da      	ldr	r2, [r3, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	425b      	negs	r3, r3
 800202e:	441a      	add	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	68da      	ldr	r2, [r3, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	429a      	cmp	r2, r3
 800203e:	d207      	bcs.n	8002050 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	425b      	negs	r3, r3
 800204a:	441a      	add	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b02      	cmp	r3, #2
 8002054:	d105      	bne.n	8002062 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d002      	beq.n	8002062 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	3b01      	subs	r3, #1
 8002060:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1c5a      	adds	r2, r3, #1
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800206a:	697b      	ldr	r3, [r7, #20]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	2b00      	cmp	r3, #0
 8002084:	d018      	beq.n	80020b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	441a      	add	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	429a      	cmp	r2, r3
 800209e:	d303      	bcc.n	80020a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68d9      	ldr	r1, [r3, #12]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	461a      	mov	r2, r3
 80020b2:	6838      	ldr	r0, [r7, #0]
 80020b4:	f001 f994 	bl	80033e0 <memcpy>
	}
}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80020c8:	f7ff fb9a 	bl	8001800 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80020d4:	e011      	b.n	80020fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d012      	beq.n	8002104 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3324      	adds	r3, #36	; 0x24
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 fbf4 	bl	80028d0 <xTaskRemoveFromEventList>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80020ee:	f000 fcd3 	bl	8002a98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
 80020f4:	3b01      	subs	r3, #1
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80020fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	dce9      	bgt.n	80020d6 <prvUnlockQueue+0x16>
 8002102:	e000      	b.n	8002106 <prvUnlockQueue+0x46>
					break;
 8002104:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	22ff      	movs	r2, #255	; 0xff
 800210a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800210e:	f7ff fba5 	bl	800185c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002112:	f7ff fb75 	bl	8001800 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800211c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800211e:	e011      	b.n	8002144 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d012      	beq.n	800214e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3310      	adds	r3, #16
 800212c:	4618      	mov	r0, r3
 800212e:	f000 fbcf 	bl	80028d0 <xTaskRemoveFromEventList>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002138:	f000 fcae 	bl	8002a98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800213c:	7bbb      	ldrb	r3, [r7, #14]
 800213e:	3b01      	subs	r3, #1
 8002140:	b2db      	uxtb	r3, r3
 8002142:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002144:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002148:	2b00      	cmp	r3, #0
 800214a:	dce9      	bgt.n	8002120 <prvUnlockQueue+0x60>
 800214c:	e000      	b.n	8002150 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800214e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	22ff      	movs	r2, #255	; 0xff
 8002154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002158:	f7ff fb80 	bl	800185c <vPortExitCritical>
}
 800215c:	bf00      	nop
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800216c:	f7ff fb48 	bl	8001800 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002174:	2b00      	cmp	r3, #0
 8002176:	d102      	bne.n	800217e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002178:	2301      	movs	r3, #1
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	e001      	b.n	8002182 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002182:	f7ff fb6b 	bl	800185c <vPortExitCritical>

	return xReturn;
 8002186:	68fb      	ldr	r3, [r7, #12]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002198:	f7ff fb32 	bl	8001800 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d102      	bne.n	80021ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80021a8:	2301      	movs	r3, #1
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	e001      	b.n	80021b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80021b2:	f7ff fb53 	bl	800185c <vPortExitCritical>

	return xReturn;
 80021b6:	68fb      	ldr	r3, [r7, #12]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08c      	sub	sp, #48	; 0x30
 80021c4:	af04      	add	r7, sp, #16
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	603b      	str	r3, [r7, #0]
 80021cc:	4613      	mov	r3, r2
 80021ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021d0:	88fb      	ldrh	r3, [r7, #6]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe ff87 	bl	80010e8 <pvPortMalloc>
 80021da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00e      	beq.n	8002200 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80021e2:	2078      	movs	r0, #120	; 0x78
 80021e4:	f7fe ff80 	bl	80010e8 <pvPortMalloc>
 80021e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	631a      	str	r2, [r3, #48]	; 0x30
 80021f6:	e005      	b.n	8002204 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80021f8:	6978      	ldr	r0, [r7, #20]
 80021fa:	f7ff f837 	bl	800126c <vPortFree>
 80021fe:	e001      	b.n	8002204 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002200:	2300      	movs	r3, #0
 8002202:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d013      	beq.n	8002232 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800220a:	88fa      	ldrh	r2, [r7, #6]
 800220c:	2300      	movs	r3, #0
 800220e:	9303      	str	r3, [sp, #12]
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	9302      	str	r3, [sp, #8]
 8002214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002216:	9301      	str	r3, [sp, #4]
 8002218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	68b9      	ldr	r1, [r7, #8]
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f000 f80e 	bl	8002242 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002226:	69f8      	ldr	r0, [r7, #28]
 8002228:	f000 f88a 	bl	8002340 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800222c:	2301      	movs	r3, #1
 800222e:	61bb      	str	r3, [r7, #24]
 8002230:	e002      	b.n	8002238 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002232:	f04f 33ff 	mov.w	r3, #4294967295
 8002236:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002238:	69bb      	ldr	r3, [r7, #24]
	}
 800223a:	4618      	mov	r0, r3
 800223c:	3720      	adds	r7, #32
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b088      	sub	sp, #32
 8002246:	af00      	add	r7, sp, #0
 8002248:	60f8      	str	r0, [r7, #12]
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	607a      	str	r2, [r7, #4]
 800224e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002252:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800225a:	3b01      	subs	r3, #1
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	f023 0307 	bic.w	r3, r3, #7
 8002268:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	2b00      	cmp	r3, #0
 8002272:	d009      	beq.n	8002288 <prvInitialiseNewTask+0x46>
 8002274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002278:	f383 8811 	msr	BASEPRI, r3
 800227c:	f3bf 8f6f 	isb	sy
 8002280:	f3bf 8f4f 	dsb	sy
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	e7fe      	b.n	8002286 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002288:	2300      	movs	r3, #0
 800228a:	61fb      	str	r3, [r7, #28]
 800228c:	e012      	b.n	80022b4 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	4413      	add	r3, r2
 8002294:	7819      	ldrb	r1, [r3, #0]
 8002296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	4413      	add	r3, r2
 800229c:	3334      	adds	r3, #52	; 0x34
 800229e:	460a      	mov	r2, r1
 80022a0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	4413      	add	r3, r2
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d006      	beq.n	80022bc <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	3301      	adds	r3, #1
 80022b2:	61fb      	str	r3, [r7, #28]
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	2b31      	cmp	r3, #49	; 0x31
 80022b8:	d9e9      	bls.n	800228e <prvInitialiseNewTask+0x4c>
 80022ba:	e000      	b.n	80022be <prvInitialiseNewTask+0x7c>
		{
			break;
 80022bc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80022be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80022c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c8:	2b0b      	cmp	r3, #11
 80022ca:	d901      	bls.n	80022d0 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80022cc:	230b      	movs	r3, #11
 80022ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80022d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80022d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022da:	669a      	str	r2, [r3, #104]	; 0x68
		pxNewTCB->uxMutexesHeld = 0;
 80022dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022de:	2200      	movs	r2, #0
 80022e0:	66da      	str	r2, [r3, #108]	; 0x6c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80022e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e4:	3304      	adds	r3, #4
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff f8f4 	bl	80014d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80022ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ee:	3318      	adds	r3, #24
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff f8ef 	bl	80014d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80022f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022fe:	f1c3 020c 	rsb	r2, r3, #12
 8002302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002304:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800230a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800230c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230e:	2200      	movs	r2, #0
 8002310:	671a      	str	r2, [r3, #112]	; 0x70
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	68f9      	ldr	r1, [r7, #12]
 800231e:	69b8      	ldr	r0, [r7, #24]
 8002320:	f7ff f96c 	bl	80015fc <pxPortInitialiseStack>
 8002324:	4602      	mov	r2, r0
 8002326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002328:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800232a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232c:	2b00      	cmp	r3, #0
 800232e:	d002      	beq.n	8002336 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002332:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002334:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002336:	bf00      	nop
 8002338:	3720      	adds	r7, #32
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002348:	f7ff fa5a 	bl	8001800 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800234c:	4b2a      	ldr	r3, [pc, #168]	; (80023f8 <prvAddNewTaskToReadyList+0xb8>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	3301      	adds	r3, #1
 8002352:	4a29      	ldr	r2, [pc, #164]	; (80023f8 <prvAddNewTaskToReadyList+0xb8>)
 8002354:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002356:	4b29      	ldr	r3, [pc, #164]	; (80023fc <prvAddNewTaskToReadyList+0xbc>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d109      	bne.n	8002372 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800235e:	4a27      	ldr	r2, [pc, #156]	; (80023fc <prvAddNewTaskToReadyList+0xbc>)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002364:	4b24      	ldr	r3, [pc, #144]	; (80023f8 <prvAddNewTaskToReadyList+0xb8>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d110      	bne.n	800238e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800236c:	f000 fbb8 	bl	8002ae0 <prvInitialiseTaskLists>
 8002370:	e00d      	b.n	800238e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002372:	4b23      	ldr	r3, [pc, #140]	; (8002400 <prvAddNewTaskToReadyList+0xc0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d109      	bne.n	800238e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800237a:	4b20      	ldr	r3, [pc, #128]	; (80023fc <prvAddNewTaskToReadyList+0xbc>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002384:	429a      	cmp	r2, r3
 8002386:	d802      	bhi.n	800238e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002388:	4a1c      	ldr	r2, [pc, #112]	; (80023fc <prvAddNewTaskToReadyList+0xbc>)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800238e:	4b1d      	ldr	r3, [pc, #116]	; (8002404 <prvAddNewTaskToReadyList+0xc4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	3301      	adds	r3, #1
 8002394:	4a1b      	ldr	r2, [pc, #108]	; (8002404 <prvAddNewTaskToReadyList+0xc4>)
 8002396:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239c:	2201      	movs	r2, #1
 800239e:	409a      	lsls	r2, r3
 80023a0:	4b19      	ldr	r3, [pc, #100]	; (8002408 <prvAddNewTaskToReadyList+0xc8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	4a18      	ldr	r2, [pc, #96]	; (8002408 <prvAddNewTaskToReadyList+0xc8>)
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4a15      	ldr	r2, [pc, #84]	; (800240c <prvAddNewTaskToReadyList+0xcc>)
 80023b8:	441a      	add	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3304      	adds	r3, #4
 80023be:	4619      	mov	r1, r3
 80023c0:	4610      	mov	r0, r2
 80023c2:	f7ff f894 	bl	80014ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80023c6:	f7ff fa49 	bl	800185c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80023ca:	4b0d      	ldr	r3, [pc, #52]	; (8002400 <prvAddNewTaskToReadyList+0xc0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00e      	beq.n	80023f0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80023d2:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <prvAddNewTaskToReadyList+0xbc>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023dc:	429a      	cmp	r2, r3
 80023de:	d207      	bcs.n	80023f0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80023e0:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <prvAddNewTaskToReadyList+0xd0>)
 80023e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	f3bf 8f4f 	dsb	sy
 80023ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80023f0:	bf00      	nop
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20003dc0 	.word	0x20003dc0
 80023fc:	20003c5c 	.word	0x20003c5c
 8002400:	20003dcc 	.word	0x20003dcc
 8002404:	20003ddc 	.word	0x20003ddc
 8002408:	20003dc8 	.word	0x20003dc8
 800240c:	20003c60 	.word	0x20003c60
 8002410:	e000ed04 	.word	0xe000ed04

08002414 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800241c:	2300      	movs	r3, #0
 800241e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d016      	beq.n	8002454 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002426:	4b13      	ldr	r3, [pc, #76]	; (8002474 <vTaskDelay+0x60>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d009      	beq.n	8002442 <vTaskDelay+0x2e>
 800242e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002432:	f383 8811 	msr	BASEPRI, r3
 8002436:	f3bf 8f6f 	isb	sy
 800243a:	f3bf 8f4f 	dsb	sy
 800243e:	60bb      	str	r3, [r7, #8]
 8002440:	e7fe      	b.n	8002440 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002442:	f000 f861 	bl	8002508 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002446:	2100      	movs	r1, #0
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 fd27 	bl	8002e9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800244e:	f000 f869 	bl	8002524 <xTaskResumeAll>
 8002452:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d107      	bne.n	800246a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800245a:	4b07      	ldr	r3, [pc, #28]	; (8002478 <vTaskDelay+0x64>)
 800245c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	f3bf 8f4f 	dsb	sy
 8002466:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20003de8 	.word	0x20003de8
 8002478:	e000ed04 	.word	0xe000ed04

0800247c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002482:	4b1b      	ldr	r3, [pc, #108]	; (80024f0 <vTaskStartScheduler+0x74>)
 8002484:	9301      	str	r3, [sp, #4]
 8002486:	2300      	movs	r3, #0
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	2300      	movs	r3, #0
 800248c:	2280      	movs	r2, #128	; 0x80
 800248e:	4919      	ldr	r1, [pc, #100]	; (80024f4 <vTaskStartScheduler+0x78>)
 8002490:	4819      	ldr	r0, [pc, #100]	; (80024f8 <vTaskStartScheduler+0x7c>)
 8002492:	f7ff fe95 	bl	80021c0 <xTaskCreate>
 8002496:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d115      	bne.n	80024ca <vTaskStartScheduler+0x4e>
 800249e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a2:	f383 8811 	msr	BASEPRI, r3
 80024a6:	f3bf 8f6f 	isb	sy
 80024aa:	f3bf 8f4f 	dsb	sy
 80024ae:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80024b0:	4b12      	ldr	r3, [pc, #72]	; (80024fc <vTaskStartScheduler+0x80>)
 80024b2:	f04f 32ff 	mov.w	r2, #4294967295
 80024b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80024b8:	4b11      	ldr	r3, [pc, #68]	; (8002500 <vTaskStartScheduler+0x84>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80024be:	4b11      	ldr	r3, [pc, #68]	; (8002504 <vTaskStartScheduler+0x88>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80024c4:	f7ff f910 	bl	80016e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80024c8:	e00d      	b.n	80024e6 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d0:	d109      	bne.n	80024e6 <vTaskStartScheduler+0x6a>
 80024d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d6:	f383 8811 	msr	BASEPRI, r3
 80024da:	f3bf 8f6f 	isb	sy
 80024de:	f3bf 8f4f 	dsb	sy
 80024e2:	607b      	str	r3, [r7, #4]
 80024e4:	e7fe      	b.n	80024e4 <vTaskStartScheduler+0x68>
}
 80024e6:	bf00      	nop
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20003de4 	.word	0x20003de4
 80024f4:	08003410 	.word	0x08003410
 80024f8:	08002ab1 	.word	0x08002ab1
 80024fc:	20003de0 	.word	0x20003de0
 8002500:	20003dcc 	.word	0x20003dcc
 8002504:	20003dc4 	.word	0x20003dc4

08002508 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800250c:	4b04      	ldr	r3, [pc, #16]	; (8002520 <vTaskSuspendAll+0x18>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	3301      	adds	r3, #1
 8002512:	4a03      	ldr	r2, [pc, #12]	; (8002520 <vTaskSuspendAll+0x18>)
 8002514:	6013      	str	r3, [r2, #0]
}
 8002516:	bf00      	nop
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	20003de8 	.word	0x20003de8

08002524 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800252e:	2300      	movs	r3, #0
 8002530:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002532:	4b41      	ldr	r3, [pc, #260]	; (8002638 <xTaskResumeAll+0x114>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d109      	bne.n	800254e <xTaskResumeAll+0x2a>
 800253a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800253e:	f383 8811 	msr	BASEPRI, r3
 8002542:	f3bf 8f6f 	isb	sy
 8002546:	f3bf 8f4f 	dsb	sy
 800254a:	603b      	str	r3, [r7, #0]
 800254c:	e7fe      	b.n	800254c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800254e:	f7ff f957 	bl	8001800 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002552:	4b39      	ldr	r3, [pc, #228]	; (8002638 <xTaskResumeAll+0x114>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	3b01      	subs	r3, #1
 8002558:	4a37      	ldr	r2, [pc, #220]	; (8002638 <xTaskResumeAll+0x114>)
 800255a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800255c:	4b36      	ldr	r3, [pc, #216]	; (8002638 <xTaskResumeAll+0x114>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d161      	bne.n	8002628 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002564:	4b35      	ldr	r3, [pc, #212]	; (800263c <xTaskResumeAll+0x118>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d05d      	beq.n	8002628 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800256c:	e02e      	b.n	80025cc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800256e:	4b34      	ldr	r3, [pc, #208]	; (8002640 <xTaskResumeAll+0x11c>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	3318      	adds	r3, #24
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff f814 	bl	80015a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	3304      	adds	r3, #4
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff f80f 	bl	80015a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258e:	2201      	movs	r2, #1
 8002590:	409a      	lsls	r2, r3
 8002592:	4b2c      	ldr	r3, [pc, #176]	; (8002644 <xTaskResumeAll+0x120>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4313      	orrs	r3, r2
 8002598:	4a2a      	ldr	r2, [pc, #168]	; (8002644 <xTaskResumeAll+0x120>)
 800259a:	6013      	str	r3, [r2, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4a27      	ldr	r2, [pc, #156]	; (8002648 <xTaskResumeAll+0x124>)
 80025aa:	441a      	add	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	3304      	adds	r3, #4
 80025b0:	4619      	mov	r1, r3
 80025b2:	4610      	mov	r0, r2
 80025b4:	f7fe ff9b 	bl	80014ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025bc:	4b23      	ldr	r3, [pc, #140]	; (800264c <xTaskResumeAll+0x128>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d302      	bcc.n	80025cc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80025c6:	4b22      	ldr	r3, [pc, #136]	; (8002650 <xTaskResumeAll+0x12c>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025cc:	4b1c      	ldr	r3, [pc, #112]	; (8002640 <xTaskResumeAll+0x11c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1cc      	bne.n	800256e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80025da:	f000 fb0d 	bl	8002bf8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80025de:	4b1d      	ldr	r3, [pc, #116]	; (8002654 <xTaskResumeAll+0x130>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d010      	beq.n	800260c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80025ea:	f000 f837 	bl	800265c <xTaskIncrementTick>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d002      	beq.n	80025fa <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80025f4:	4b16      	ldr	r3, [pc, #88]	; (8002650 <xTaskResumeAll+0x12c>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3b01      	subs	r3, #1
 80025fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f1      	bne.n	80025ea <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8002606:	4b13      	ldr	r3, [pc, #76]	; (8002654 <xTaskResumeAll+0x130>)
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800260c:	4b10      	ldr	r3, [pc, #64]	; (8002650 <xTaskResumeAll+0x12c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d009      	beq.n	8002628 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002614:	2301      	movs	r3, #1
 8002616:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002618:	4b0f      	ldr	r3, [pc, #60]	; (8002658 <xTaskResumeAll+0x134>)
 800261a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	f3bf 8f4f 	dsb	sy
 8002624:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002628:	f7ff f918 	bl	800185c <vPortExitCritical>

	return xAlreadyYielded;
 800262c:	68bb      	ldr	r3, [r7, #8]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20003de8 	.word	0x20003de8
 800263c:	20003dc0 	.word	0x20003dc0
 8002640:	20003d80 	.word	0x20003d80
 8002644:	20003dc8 	.word	0x20003dc8
 8002648:	20003c60 	.word	0x20003c60
 800264c:	20003c5c 	.word	0x20003c5c
 8002650:	20003dd4 	.word	0x20003dd4
 8002654:	20003dd0 	.word	0x20003dd0
 8002658:	e000ed04 	.word	0xe000ed04

0800265c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002662:	2300      	movs	r3, #0
 8002664:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002666:	4b50      	ldr	r3, [pc, #320]	; (80027a8 <xTaskIncrementTick+0x14c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	f040 808c 	bne.w	8002788 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8002670:	4b4e      	ldr	r3, [pc, #312]	; (80027ac <xTaskIncrementTick+0x150>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	3301      	adds	r3, #1
 8002676:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002678:	4a4c      	ldr	r2, [pc, #304]	; (80027ac <xTaskIncrementTick+0x150>)
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d11f      	bne.n	80026c4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002684:	4b4a      	ldr	r3, [pc, #296]	; (80027b0 <xTaskIncrementTick+0x154>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d009      	beq.n	80026a2 <xTaskIncrementTick+0x46>
 800268e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002692:	f383 8811 	msr	BASEPRI, r3
 8002696:	f3bf 8f6f 	isb	sy
 800269a:	f3bf 8f4f 	dsb	sy
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	e7fe      	b.n	80026a0 <xTaskIncrementTick+0x44>
 80026a2:	4b43      	ldr	r3, [pc, #268]	; (80027b0 <xTaskIncrementTick+0x154>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	4b42      	ldr	r3, [pc, #264]	; (80027b4 <xTaskIncrementTick+0x158>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a40      	ldr	r2, [pc, #256]	; (80027b0 <xTaskIncrementTick+0x154>)
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	4a40      	ldr	r2, [pc, #256]	; (80027b4 <xTaskIncrementTick+0x158>)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	4b40      	ldr	r3, [pc, #256]	; (80027b8 <xTaskIncrementTick+0x15c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	3301      	adds	r3, #1
 80026bc:	4a3e      	ldr	r2, [pc, #248]	; (80027b8 <xTaskIncrementTick+0x15c>)
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	f000 fa9a 	bl	8002bf8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80026c4:	4b3d      	ldr	r3, [pc, #244]	; (80027bc <xTaskIncrementTick+0x160>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d34d      	bcc.n	800276a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026ce:	4b38      	ldr	r3, [pc, #224]	; (80027b0 <xTaskIncrementTick+0x154>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <xTaskIncrementTick+0x80>
 80026d8:	2301      	movs	r3, #1
 80026da:	e000      	b.n	80026de <xTaskIncrementTick+0x82>
 80026dc:	2300      	movs	r3, #0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d004      	beq.n	80026ec <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026e2:	4b36      	ldr	r3, [pc, #216]	; (80027bc <xTaskIncrementTick+0x160>)
 80026e4:	f04f 32ff 	mov.w	r2, #4294967295
 80026e8:	601a      	str	r2, [r3, #0]
					break;
 80026ea:	e03e      	b.n	800276a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80026ec:	4b30      	ldr	r3, [pc, #192]	; (80027b0 <xTaskIncrementTick+0x154>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	429a      	cmp	r2, r3
 8002702:	d203      	bcs.n	800270c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002704:	4a2d      	ldr	r2, [pc, #180]	; (80027bc <xTaskIncrementTick+0x160>)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6013      	str	r3, [r2, #0]
						break;
 800270a:	e02e      	b.n	800276a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	3304      	adds	r3, #4
 8002710:	4618      	mov	r0, r3
 8002712:	f7fe ff49 	bl	80015a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271a:	2b00      	cmp	r3, #0
 800271c:	d004      	beq.n	8002728 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	3318      	adds	r3, #24
 8002722:	4618      	mov	r0, r3
 8002724:	f7fe ff40 	bl	80015a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272c:	2201      	movs	r2, #1
 800272e:	409a      	lsls	r2, r3
 8002730:	4b23      	ldr	r3, [pc, #140]	; (80027c0 <xTaskIncrementTick+0x164>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4313      	orrs	r3, r2
 8002736:	4a22      	ldr	r2, [pc, #136]	; (80027c0 <xTaskIncrementTick+0x164>)
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4a1f      	ldr	r2, [pc, #124]	; (80027c4 <xTaskIncrementTick+0x168>)
 8002748:	441a      	add	r2, r3
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	3304      	adds	r3, #4
 800274e:	4619      	mov	r1, r3
 8002750:	4610      	mov	r0, r2
 8002752:	f7fe fecc 	bl	80014ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800275a:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <xTaskIncrementTick+0x16c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002760:	429a      	cmp	r2, r3
 8002762:	d3b4      	bcc.n	80026ce <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002764:	2301      	movs	r3, #1
 8002766:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002768:	e7b1      	b.n	80026ce <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800276a:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <xTaskIncrementTick+0x16c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002770:	4914      	ldr	r1, [pc, #80]	; (80027c4 <xTaskIncrementTick+0x168>)
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	440b      	add	r3, r1
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d907      	bls.n	8002792 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8002782:	2301      	movs	r3, #1
 8002784:	617b      	str	r3, [r7, #20]
 8002786:	e004      	b.n	8002792 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002788:	4b10      	ldr	r3, [pc, #64]	; (80027cc <xTaskIncrementTick+0x170>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	3301      	adds	r3, #1
 800278e:	4a0f      	ldr	r2, [pc, #60]	; (80027cc <xTaskIncrementTick+0x170>)
 8002790:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002792:	4b0f      	ldr	r3, [pc, #60]	; (80027d0 <xTaskIncrementTick+0x174>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800279a:	2301      	movs	r3, #1
 800279c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800279e:	697b      	ldr	r3, [r7, #20]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	20003de8 	.word	0x20003de8
 80027ac:	20003dc4 	.word	0x20003dc4
 80027b0:	20003d78 	.word	0x20003d78
 80027b4:	20003d7c 	.word	0x20003d7c
 80027b8:	20003dd8 	.word	0x20003dd8
 80027bc:	20003de0 	.word	0x20003de0
 80027c0:	20003dc8 	.word	0x20003dc8
 80027c4:	20003c60 	.word	0x20003c60
 80027c8:	20003c5c 	.word	0x20003c5c
 80027cc:	20003dd0 	.word	0x20003dd0
 80027d0:	20003dd4 	.word	0x20003dd4

080027d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80027d4:	b480      	push	{r7}
 80027d6:	b087      	sub	sp, #28
 80027d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80027da:	4b26      	ldr	r3, [pc, #152]	; (8002874 <vTaskSwitchContext+0xa0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80027e2:	4b25      	ldr	r3, [pc, #148]	; (8002878 <vTaskSwitchContext+0xa4>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80027e8:	e03e      	b.n	8002868 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80027ea:	4b23      	ldr	r3, [pc, #140]	; (8002878 <vTaskSwitchContext+0xa4>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80027f0:	4b22      	ldr	r3, [pc, #136]	; (800287c <vTaskSwitchContext+0xa8>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	fab3 f383 	clz	r3, r3
 80027fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80027fe:	7afb      	ldrb	r3, [r7, #11]
 8002800:	f1c3 031f 	rsb	r3, r3, #31
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	491e      	ldr	r1, [pc, #120]	; (8002880 <vTaskSwitchContext+0xac>)
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d109      	bne.n	800282e <vTaskSwitchContext+0x5a>
	__asm volatile
 800281a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281e:	f383 8811 	msr	BASEPRI, r3
 8002822:	f3bf 8f6f 	isb	sy
 8002826:	f3bf 8f4f 	dsb	sy
 800282a:	607b      	str	r3, [r7, #4]
 800282c:	e7fe      	b.n	800282c <vTaskSwitchContext+0x58>
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	4613      	mov	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4a11      	ldr	r2, [pc, #68]	; (8002880 <vTaskSwitchContext+0xac>)
 800283a:	4413      	add	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	605a      	str	r2, [r3, #4]
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	3308      	adds	r3, #8
 8002850:	429a      	cmp	r2, r3
 8002852:	d104      	bne.n	800285e <vTaskSwitchContext+0x8a>
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	4a07      	ldr	r2, [pc, #28]	; (8002884 <vTaskSwitchContext+0xb0>)
 8002866:	6013      	str	r3, [r2, #0]
}
 8002868:	bf00      	nop
 800286a:	371c      	adds	r7, #28
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	20003de8 	.word	0x20003de8
 8002878:	20003dd4 	.word	0x20003dd4
 800287c:	20003dc8 	.word	0x20003dc8
 8002880:	20003c60 	.word	0x20003c60
 8002884:	20003c5c 	.word	0x20003c5c

08002888 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d109      	bne.n	80028ac <vTaskPlaceOnEventList+0x24>
 8002898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289c:	f383 8811 	msr	BASEPRI, r3
 80028a0:	f3bf 8f6f 	isb	sy
 80028a4:	f3bf 8f4f 	dsb	sy
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	e7fe      	b.n	80028aa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80028ac:	4b07      	ldr	r3, [pc, #28]	; (80028cc <vTaskPlaceOnEventList+0x44>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	3318      	adds	r3, #24
 80028b2:	4619      	mov	r1, r3
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7fe fe3e 	bl	8001536 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80028ba:	2101      	movs	r1, #1
 80028bc:	6838      	ldr	r0, [r7, #0]
 80028be:	f000 faed 	bl	8002e9c <prvAddCurrentTaskToDelayedList>
}
 80028c2:	bf00      	nop
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	20003c5c 	.word	0x20003c5c

080028d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d109      	bne.n	80028fa <xTaskRemoveFromEventList+0x2a>
 80028e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ea:	f383 8811 	msr	BASEPRI, r3
 80028ee:	f3bf 8f6f 	isb	sy
 80028f2:	f3bf 8f4f 	dsb	sy
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	e7fe      	b.n	80028f8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	3318      	adds	r3, #24
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fe fe52 	bl	80015a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002904:	4b1d      	ldr	r3, [pc, #116]	; (800297c <xTaskRemoveFromEventList+0xac>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d11c      	bne.n	8002946 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	3304      	adds	r3, #4
 8002910:	4618      	mov	r0, r3
 8002912:	f7fe fe49 	bl	80015a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291a:	2201      	movs	r2, #1
 800291c:	409a      	lsls	r2, r3
 800291e:	4b18      	ldr	r3, [pc, #96]	; (8002980 <xTaskRemoveFromEventList+0xb0>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4313      	orrs	r3, r2
 8002924:	4a16      	ldr	r2, [pc, #88]	; (8002980 <xTaskRemoveFromEventList+0xb0>)
 8002926:	6013      	str	r3, [r2, #0]
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800292c:	4613      	mov	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4a13      	ldr	r2, [pc, #76]	; (8002984 <xTaskRemoveFromEventList+0xb4>)
 8002936:	441a      	add	r2, r3
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	3304      	adds	r3, #4
 800293c:	4619      	mov	r1, r3
 800293e:	4610      	mov	r0, r2
 8002940:	f7fe fdd5 	bl	80014ee <vListInsertEnd>
 8002944:	e005      	b.n	8002952 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	3318      	adds	r3, #24
 800294a:	4619      	mov	r1, r3
 800294c:	480e      	ldr	r0, [pc, #56]	; (8002988 <xTaskRemoveFromEventList+0xb8>)
 800294e:	f7fe fdce 	bl	80014ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002956:	4b0d      	ldr	r3, [pc, #52]	; (800298c <xTaskRemoveFromEventList+0xbc>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295c:	429a      	cmp	r2, r3
 800295e:	d905      	bls.n	800296c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002960:	2301      	movs	r3, #1
 8002962:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002964:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <xTaskRemoveFromEventList+0xc0>)
 8002966:	2201      	movs	r2, #1
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	e001      	b.n	8002970 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002970:	697b      	ldr	r3, [r7, #20]
}
 8002972:	4618      	mov	r0, r3
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20003de8 	.word	0x20003de8
 8002980:	20003dc8 	.word	0x20003dc8
 8002984:	20003c60 	.word	0x20003c60
 8002988:	20003d80 	.word	0x20003d80
 800298c:	20003c5c 	.word	0x20003c5c
 8002990:	20003dd4 	.word	0x20003dd4

08002994 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d109      	bne.n	80029b6 <vTaskSetTimeOutState+0x22>
 80029a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a6:	f383 8811 	msr	BASEPRI, r3
 80029aa:	f3bf 8f6f 	isb	sy
 80029ae:	f3bf 8f4f 	dsb	sy
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	e7fe      	b.n	80029b4 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80029b6:	4b07      	ldr	r3, [pc, #28]	; (80029d4 <vTaskSetTimeOutState+0x40>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80029be:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <vTaskSetTimeOutState+0x44>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	605a      	str	r2, [r3, #4]
}
 80029c6:	bf00      	nop
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	20003dd8 	.word	0x20003dd8
 80029d8:	20003dc4 	.word	0x20003dc4

080029dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d109      	bne.n	8002a00 <xTaskCheckForTimeOut+0x24>
 80029ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f0:	f383 8811 	msr	BASEPRI, r3
 80029f4:	f3bf 8f6f 	isb	sy
 80029f8:	f3bf 8f4f 	dsb	sy
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	e7fe      	b.n	80029fe <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d109      	bne.n	8002a1a <xTaskCheckForTimeOut+0x3e>
 8002a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a0a:	f383 8811 	msr	BASEPRI, r3
 8002a0e:	f3bf 8f6f 	isb	sy
 8002a12:	f3bf 8f4f 	dsb	sy
 8002a16:	60bb      	str	r3, [r7, #8]
 8002a18:	e7fe      	b.n	8002a18 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8002a1a:	f7fe fef1 	bl	8001800 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002a1e:	4b1c      	ldr	r3, [pc, #112]	; (8002a90 <xTaskCheckForTimeOut+0xb4>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2c:	d102      	bne.n	8002a34 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	617b      	str	r3, [r7, #20]
 8002a32:	e026      	b.n	8002a82 <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	4b16      	ldr	r3, [pc, #88]	; (8002a94 <xTaskCheckForTimeOut+0xb8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d007      	beq.n	8002a50 <xTaskCheckForTimeOut+0x74>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d802      	bhi.n	8002a50 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	617b      	str	r3, [r7, #20]
 8002a4e:	e018      	b.n	8002a82 <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	1ad2      	subs	r2, r2, r3
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d20e      	bcs.n	8002a7e <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6859      	ldr	r1, [r3, #4]
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1acb      	subs	r3, r1, r3
 8002a6c:	441a      	add	r2, r3
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7ff ff8e 	bl	8002994 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	e001      	b.n	8002a82 <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8002a82:	f7fe feeb 	bl	800185c <vPortExitCritical>

	return xReturn;
 8002a86:	697b      	ldr	r3, [r7, #20]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20003dc4 	.word	0x20003dc4
 8002a94:	20003dd8 	.word	0x20003dd8

08002a98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002a9c:	4b03      	ldr	r3, [pc, #12]	; (8002aac <vTaskMissedYield+0x14>)
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]
}
 8002aa2:	bf00      	nop
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	20003dd4 	.word	0x20003dd4

08002ab0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002ab8:	f000 f852 	bl	8002b60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002abc:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <prvIdleTask+0x28>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d9f9      	bls.n	8002ab8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002ac4:	4b05      	ldr	r3, [pc, #20]	; (8002adc <prvIdleTask+0x2c>)
 8002ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	f3bf 8f4f 	dsb	sy
 8002ad0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002ad4:	e7f0      	b.n	8002ab8 <prvIdleTask+0x8>
 8002ad6:	bf00      	nop
 8002ad8:	20003c60 	.word	0x20003c60
 8002adc:	e000ed04 	.word	0xe000ed04

08002ae0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	607b      	str	r3, [r7, #4]
 8002aea:	e00c      	b.n	8002b06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	4613      	mov	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4a12      	ldr	r2, [pc, #72]	; (8002b40 <prvInitialiseTaskLists+0x60>)
 8002af8:	4413      	add	r3, r2
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fe fcca 	bl	8001494 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3301      	adds	r3, #1
 8002b04:	607b      	str	r3, [r7, #4]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b0b      	cmp	r3, #11
 8002b0a:	d9ef      	bls.n	8002aec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002b0c:	480d      	ldr	r0, [pc, #52]	; (8002b44 <prvInitialiseTaskLists+0x64>)
 8002b0e:	f7fe fcc1 	bl	8001494 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002b12:	480d      	ldr	r0, [pc, #52]	; (8002b48 <prvInitialiseTaskLists+0x68>)
 8002b14:	f7fe fcbe 	bl	8001494 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002b18:	480c      	ldr	r0, [pc, #48]	; (8002b4c <prvInitialiseTaskLists+0x6c>)
 8002b1a:	f7fe fcbb 	bl	8001494 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002b1e:	480c      	ldr	r0, [pc, #48]	; (8002b50 <prvInitialiseTaskLists+0x70>)
 8002b20:	f7fe fcb8 	bl	8001494 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002b24:	480b      	ldr	r0, [pc, #44]	; (8002b54 <prvInitialiseTaskLists+0x74>)
 8002b26:	f7fe fcb5 	bl	8001494 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002b2a:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <prvInitialiseTaskLists+0x78>)
 8002b2c:	4a05      	ldr	r2, [pc, #20]	; (8002b44 <prvInitialiseTaskLists+0x64>)
 8002b2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002b30:	4b0a      	ldr	r3, [pc, #40]	; (8002b5c <prvInitialiseTaskLists+0x7c>)
 8002b32:	4a05      	ldr	r2, [pc, #20]	; (8002b48 <prvInitialiseTaskLists+0x68>)
 8002b34:	601a      	str	r2, [r3, #0]
}
 8002b36:	bf00      	nop
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20003c60 	.word	0x20003c60
 8002b44:	20003d50 	.word	0x20003d50
 8002b48:	20003d64 	.word	0x20003d64
 8002b4c:	20003d80 	.word	0x20003d80
 8002b50:	20003d94 	.word	0x20003d94
 8002b54:	20003dac 	.word	0x20003dac
 8002b58:	20003d78 	.word	0x20003d78
 8002b5c:	20003d7c 	.word	0x20003d7c

08002b60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b66:	e028      	b.n	8002bba <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8002b68:	f7ff fcce 	bl	8002508 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002b6c:	4b17      	ldr	r3, [pc, #92]	; (8002bcc <prvCheckTasksWaitingTermination+0x6c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	bf0c      	ite	eq
 8002b74:	2301      	moveq	r3, #1
 8002b76:	2300      	movne	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8002b7c:	f7ff fcd2 	bl	8002524 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d119      	bne.n	8002bba <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8002b86:	f7fe fe3b 	bl	8001800 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002b8a:	4b10      	ldr	r3, [pc, #64]	; (8002bcc <prvCheckTasksWaitingTermination+0x6c>)
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	3304      	adds	r3, #4
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fe fd06 	bl	80015a8 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8002b9c:	4b0c      	ldr	r3, [pc, #48]	; (8002bd0 <prvCheckTasksWaitingTermination+0x70>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	4a0b      	ldr	r2, [pc, #44]	; (8002bd0 <prvCheckTasksWaitingTermination+0x70>)
 8002ba4:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8002ba6:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <prvCheckTasksWaitingTermination+0x74>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	4a09      	ldr	r2, [pc, #36]	; (8002bd4 <prvCheckTasksWaitingTermination+0x74>)
 8002bae:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8002bb0:	f7fe fe54 	bl	800185c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8002bb4:	6838      	ldr	r0, [r7, #0]
 8002bb6:	f000 f80f 	bl	8002bd8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002bba:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <prvCheckTasksWaitingTermination+0x74>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1d2      	bne.n	8002b68 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20003d94 	.word	0x20003d94
 8002bd0:	20003dc0 	.word	0x20003dc0
 8002bd4:	20003da8 	.word	0x20003da8

08002bd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fe fb41 	bl	800126c <vPortFree>
			vPortFree( pxTCB );
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7fe fb3e 	bl	800126c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bfe:	4b0f      	ldr	r3, [pc, #60]	; (8002c3c <prvResetNextTaskUnblockTime+0x44>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <prvResetNextTaskUnblockTime+0x14>
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e000      	b.n	8002c0e <prvResetNextTaskUnblockTime+0x16>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d004      	beq.n	8002c1c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002c12:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <prvResetNextTaskUnblockTime+0x48>)
 8002c14:	f04f 32ff 	mov.w	r2, #4294967295
 8002c18:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002c1a:	e008      	b.n	8002c2e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002c1c:	4b07      	ldr	r3, [pc, #28]	; (8002c3c <prvResetNextTaskUnblockTime+0x44>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	4a05      	ldr	r2, [pc, #20]	; (8002c40 <prvResetNextTaskUnblockTime+0x48>)
 8002c2c:	6013      	str	r3, [r2, #0]
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	20003d78 	.word	0x20003d78
 8002c40:	20003de0 	.word	0x20003de0

08002c44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002c4a:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <xTaskGetSchedulerState+0x34>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d102      	bne.n	8002c58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002c52:	2301      	movs	r3, #1
 8002c54:	607b      	str	r3, [r7, #4]
 8002c56:	e008      	b.n	8002c6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c58:	4b08      	ldr	r3, [pc, #32]	; (8002c7c <xTaskGetSchedulerState+0x38>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d102      	bne.n	8002c66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002c60:	2302      	movs	r3, #2
 8002c62:	607b      	str	r3, [r7, #4]
 8002c64:	e001      	b.n	8002c6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002c66:	2300      	movs	r3, #0
 8002c68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002c6a:	687b      	ldr	r3, [r7, #4]
	}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	20003dcc 	.word	0x20003dcc
 8002c7c:	20003de8 	.word	0x20003de8

08002c80 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d062      	beq.n	8002d58 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c96:	4b32      	ldr	r3, [pc, #200]	; (8002d60 <vTaskPriorityInherit+0xe0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d25b      	bcs.n	8002d58 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	db06      	blt.n	8002cb6 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ca8:	4b2d      	ldr	r3, [pc, #180]	; (8002d60 <vTaskPriorityInherit+0xe0>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cae:	f1c3 020c 	rsb	r2, r3, #12
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6959      	ldr	r1, [r3, #20]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4a27      	ldr	r2, [pc, #156]	; (8002d64 <vTaskPriorityInherit+0xe4>)
 8002cc8:	4413      	add	r3, r2
 8002cca:	4299      	cmp	r1, r3
 8002ccc:	d101      	bne.n	8002cd2 <vTaskPriorityInherit+0x52>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <vTaskPriorityInherit+0x54>
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d03a      	beq.n	8002d4e <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	3304      	adds	r3, #4
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7fe fc63 	bl	80015a8 <uxListRemove>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d115      	bne.n	8002d14 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cec:	491d      	ldr	r1, [pc, #116]	; (8002d64 <vTaskPriorityInherit+0xe4>)
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10a      	bne.n	8002d14 <vTaskPriorityInherit+0x94>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d02:	2201      	movs	r2, #1
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	43da      	mvns	r2, r3
 8002d0a:	4b17      	ldr	r3, [pc, #92]	; (8002d68 <vTaskPriorityInherit+0xe8>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	4a15      	ldr	r2, [pc, #84]	; (8002d68 <vTaskPriorityInherit+0xe8>)
 8002d12:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002d14:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <vTaskPriorityInherit+0xe0>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d22:	2201      	movs	r2, #1
 8002d24:	409a      	lsls	r2, r3
 8002d26:	4b10      	ldr	r3, [pc, #64]	; (8002d68 <vTaskPriorityInherit+0xe8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	4a0e      	ldr	r2, [pc, #56]	; (8002d68 <vTaskPriorityInherit+0xe8>)
 8002d2e:	6013      	str	r3, [r2, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d34:	4613      	mov	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4a09      	ldr	r2, [pc, #36]	; (8002d64 <vTaskPriorityInherit+0xe4>)
 8002d3e:	441a      	add	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	3304      	adds	r3, #4
 8002d44:	4619      	mov	r1, r3
 8002d46:	4610      	mov	r0, r2
 8002d48:	f7fe fbd1 	bl	80014ee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002d4c:	e004      	b.n	8002d58 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002d4e:	4b04      	ldr	r3, [pc, #16]	; (8002d60 <vTaskPriorityInherit+0xe0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8002d58:	bf00      	nop
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	20003c5c 	.word	0x20003c5c
 8002d64:	20003c60 	.word	0x20003c60
 8002d68:	20003dc8 	.word	0x20003dc8

08002d6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d06c      	beq.n	8002e5c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002d82:	4b39      	ldr	r3, [pc, #228]	; (8002e68 <xTaskPriorityDisinherit+0xfc>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d009      	beq.n	8002da0 <xTaskPriorityDisinherit+0x34>
 8002d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d90:	f383 8811 	msr	BASEPRI, r3
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	e7fe      	b.n	8002d9e <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d109      	bne.n	8002dbc <xTaskPriorityDisinherit+0x50>
 8002da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dac:	f383 8811 	msr	BASEPRI, r3
 8002db0:	f3bf 8f6f 	isb	sy
 8002db4:	f3bf 8f4f 	dsb	sy
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	e7fe      	b.n	8002dba <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dc0:	1e5a      	subs	r2, r3, #1
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	66da      	str	r2, [r3, #108]	; 0x6c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d044      	beq.n	8002e5c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d140      	bne.n	8002e5c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	3304      	adds	r3, #4
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fe fbe2 	bl	80015a8 <uxListRemove>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d115      	bne.n	8002e16 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dee:	491f      	ldr	r1, [pc, #124]	; (8002e6c <xTaskPriorityDisinherit+0x100>)
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10a      	bne.n	8002e16 <xTaskPriorityDisinherit+0xaa>
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	2201      	movs	r2, #1
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43da      	mvns	r2, r3
 8002e0c:	4b18      	ldr	r3, [pc, #96]	; (8002e70 <xTaskPriorityDisinherit+0x104>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4013      	ands	r3, r2
 8002e12:	4a17      	ldr	r2, [pc, #92]	; (8002e70 <xTaskPriorityDisinherit+0x104>)
 8002e14:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e22:	f1c3 020c 	rsb	r2, r3, #12
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2e:	2201      	movs	r2, #1
 8002e30:	409a      	lsls	r2, r3
 8002e32:	4b0f      	ldr	r3, [pc, #60]	; (8002e70 <xTaskPriorityDisinherit+0x104>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	4a0d      	ldr	r2, [pc, #52]	; (8002e70 <xTaskPriorityDisinherit+0x104>)
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4a08      	ldr	r2, [pc, #32]	; (8002e6c <xTaskPriorityDisinherit+0x100>)
 8002e4a:	441a      	add	r2, r3
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	3304      	adds	r3, #4
 8002e50:	4619      	mov	r1, r3
 8002e52:	4610      	mov	r0, r2
 8002e54:	f7fe fb4b 	bl	80014ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002e5c:	697b      	ldr	r3, [r7, #20]
	}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20003c5c 	.word	0x20003c5c
 8002e6c:	20003c60 	.word	0x20003c60
 8002e70:	20003dc8 	.word	0x20003dc8

08002e74 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8002e78:	4b07      	ldr	r3, [pc, #28]	; (8002e98 <pvTaskIncrementMutexHeldCount+0x24>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d004      	beq.n	8002e8a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8002e80:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <pvTaskIncrementMutexHeldCount+0x24>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002e86:	3201      	adds	r2, #1
 8002e88:	66da      	str	r2, [r3, #108]	; 0x6c
		}

		return pxCurrentTCB;
 8002e8a:	4b03      	ldr	r3, [pc, #12]	; (8002e98 <pvTaskIncrementMutexHeldCount+0x24>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
	}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	20003c5c 	.word	0x20003c5c

08002e9c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002ea6:	4b29      	ldr	r3, [pc, #164]	; (8002f4c <prvAddCurrentTaskToDelayedList+0xb0>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002eac:	4b28      	ldr	r3, [pc, #160]	; (8002f50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fe fb78 	bl	80015a8 <uxListRemove>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10b      	bne.n	8002ed6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002ebe:	4b24      	ldr	r3, [pc, #144]	; (8002f50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	43da      	mvns	r2, r3
 8002ecc:	4b21      	ldr	r3, [pc, #132]	; (8002f54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	4a20      	ldr	r2, [pc, #128]	; (8002f54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002ed4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002edc:	d10a      	bne.n	8002ef4 <prvAddCurrentTaskToDelayedList+0x58>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d007      	beq.n	8002ef4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ee4:	4b1a      	ldr	r3, [pc, #104]	; (8002f50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	3304      	adds	r3, #4
 8002eea:	4619      	mov	r1, r3
 8002eec:	481a      	ldr	r0, [pc, #104]	; (8002f58 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002eee:	f7fe fafe 	bl	80014ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002ef2:	e026      	b.n	8002f42 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4413      	add	r3, r2
 8002efa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002efc:	4b14      	ldr	r3, [pc, #80]	; (8002f50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d209      	bcs.n	8002f20 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f0c:	4b13      	ldr	r3, [pc, #76]	; (8002f5c <prvAddCurrentTaskToDelayedList+0xc0>)
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	4b0f      	ldr	r3, [pc, #60]	; (8002f50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	3304      	adds	r3, #4
 8002f16:	4619      	mov	r1, r3
 8002f18:	4610      	mov	r0, r2
 8002f1a:	f7fe fb0c 	bl	8001536 <vListInsert>
}
 8002f1e:	e010      	b.n	8002f42 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f20:	4b0f      	ldr	r3, [pc, #60]	; (8002f60 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	3304      	adds	r3, #4
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	f7fe fb02 	bl	8001536 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002f32:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d202      	bcs.n	8002f42 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002f3c:	4a09      	ldr	r2, [pc, #36]	; (8002f64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	6013      	str	r3, [r2, #0]
}
 8002f42:	bf00      	nop
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	20003dc4 	.word	0x20003dc4
 8002f50:	20003c5c 	.word	0x20003c5c
 8002f54:	20003dc8 	.word	0x20003dc8
 8002f58:	20003dac 	.word	0x20003dac
 8002f5c:	20003d7c 	.word	0x20003d7c
 8002f60:	20003d78 	.word	0x20003d78
 8002f64:	20003de0 	.word	0x20003de0

08002f68 <main>:
//void SysTick_Handler(void){
//	tickCount++;
//}

int main(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af02      	add	r7, sp, #8
//	uint8_t key = 0;
//	uint16_t adc_val , temp= 0;
//
//	uint8_t dety6=0, dety7=0 ;
	/* Clock -> Internal 16 MHz */
	RCC_DeInit();				/* Adapt PLL to the internal 16 MHz RC oscillator */
 8002f6e:	f7fd fee1 	bl	8000d34 <RCC_DeInit>
	SystemCoreClockUpdate();	/* Update SystemCoreClock */
 8002f72:	f000 f919 	bl	80031a8 <SystemCoreClockUpdate>
Leds_Init(0xff);
 8002f76:	20ff      	movs	r0, #255	; 0xff
 8002f78:	f7fd fd9c 	bl	8000ab4 <Leds_Init>
Buz_Init();
 8002f7c:	f7fd fd42 	bl	8000a04 <Buz_Init>
Btn_Init(BTN_RIGHT);
 8002f80:	2001      	movs	r0, #1
 8002f82:	f7fd fdd5 	bl	8000b30 <Btn_Init>
Btn_Init(BTN_LEFT);
 8002f86:	2002      	movs	r0, #2
 8002f88:	f7fd fdd2 	bl	8000b30 <Btn_Init>
Btn_Init(BTN_UP);
 8002f8c:	2003      	movs	r0, #3
 8002f8e:	f7fd fdcf 	bl	8000b30 <Btn_Init>
Btn_Init(BTN_DOWN);
 8002f92:	2004      	movs	r0, #4
 8002f94:	f7fd fdcc 	bl	8000b30 <Btn_Init>
Relay_Init();
 8002f98:	f7fd fd60 	bl	8000a5c <Relay_Init>
Uart_Init(USART2,9600);
 8002f9c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8002fa0:	4811      	ldr	r0, [pc, #68]	; (8002fe8 <main+0x80>)
 8002fa2:	f7fd ff3d 	bl	8000e20 <Uart_Init>

Uart_SendString(USART2,"rtos stared\n");
 8002fa6:	4911      	ldr	r1, [pc, #68]	; (8002fec <main+0x84>)
 8002fa8:	480f      	ldr	r0, [pc, #60]	; (8002fe8 <main+0x80>)
 8002faa:	f7fe f875 	bl	8001098 <Uart_SendString>

/* os objects init and creation*/
//vSemaphoreCreateBinary() make sem init by 1 or z for 1 for resource and zero for events
mxRes = xSemaphoreCreateMutex();
 8002fae:	2001      	movs	r0, #1
 8002fb0:	f7fe fdd2 	bl	8001b58 <xQueueCreateMutex>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	4b0e      	ldr	r3, [pc, #56]	; (8002ff0 <main+0x88>)
 8002fb8:	601a      	str	r2, [r3, #0]

//xSemaphoreCreateBinary() make sem init by 0 for events
//bsBtnPreesedEvent = xSemaphoreCreateBinary();
/*Create Tasks*/
xTaskCreate(T_SMS,"T_1",100,NULL,1,NULL);//100word stack size , 1 prority,
 8002fba:	2300      	movs	r3, #0
 8002fbc:	9301      	str	r3, [sp, #4]
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	2264      	movs	r2, #100	; 0x64
 8002fc6:	490b      	ldr	r1, [pc, #44]	; (8002ff4 <main+0x8c>)
 8002fc8:	480b      	ldr	r0, [pc, #44]	; (8002ff8 <main+0x90>)
 8002fca:	f7ff f8f9 	bl	80021c0 <xTaskCreate>
xTaskCreate(T_Server,"T_2",100,NULL,2,NULL);//100word stack size , 1 prority,
 8002fce:	2300      	movs	r3, #0
 8002fd0:	9301      	str	r3, [sp, #4]
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	2264      	movs	r2, #100	; 0x64
 8002fda:	4908      	ldr	r1, [pc, #32]	; (8002ffc <main+0x94>)
 8002fdc:	4808      	ldr	r0, [pc, #32]	; (8003000 <main+0x98>)
 8002fde:	f7ff f8ef 	bl	80021c0 <xTaskCreate>
//xTaskCreate(T_led2,"T_4",100,NULL,4,NULL);//100word stack size , 1 prority,
////xTaskCreate(T_5,"T_5",100,NULL,5,NULL);//100word stack size , 1 prority,
//xTaskCreate(T_rel,"T_6",100,NULL,6,NULL);//100word stack size , 1 prority,
//x for return data type defined in rtos
/* start os or scheduler*/
vTaskStartScheduler();// v for return void
 8002fe2:	f7ff fa4b 	bl	800247c <vTaskStartScheduler>
while(1){
 8002fe6:	e7fe      	b.n	8002fe6 <main+0x7e>
 8002fe8:	40004400 	.word	0x40004400
 8002fec:	08003418 	.word	0x08003418
 8002ff0:	20003dec 	.word	0x20003dec
 8002ff4:	08003428 	.word	0x08003428
 8002ff8:	08003005 	.word	0x08003005
 8002ffc:	0800342c 	.word	0x0800342c
 8003000:	08003055 	.word	0x08003055

08003004 <T_SMS>:

}


}
void T_SMS(void* pvData){
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]

	while(1){
		if(xSemaphoreTake(mxRes,portMAX_DELAY)){//portMAX_DELAY give me the max delay out time
 800300c:	4b0d      	ldr	r3, [pc, #52]	; (8003044 <T_SMS+0x40>)
 800300e:	6818      	ldr	r0, [r3, #0]
 8003010:	2300      	movs	r3, #0
 8003012:	f04f 32ff 	mov.w	r2, #4294967295
 8003016:	2100      	movs	r1, #0
 8003018:	f7fe feb0 	bl	8001d7c <xQueueGenericReceive>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0f4      	beq.n	800300c <T_SMS+0x8>
		Uart_SendString(USART2," AT+SMS1...\n");
 8003022:	4909      	ldr	r1, [pc, #36]	; (8003048 <T_SMS+0x44>)
 8003024:	4809      	ldr	r0, [pc, #36]	; (800304c <T_SMS+0x48>)
 8003026:	f7fe f837 	bl	8001098 <Uart_SendString>
		Uart_SendString(USART2," AT+SMS2...\n");
 800302a:	4909      	ldr	r1, [pc, #36]	; (8003050 <T_SMS+0x4c>)
 800302c:	4807      	ldr	r0, [pc, #28]	; (800304c <T_SMS+0x48>)
 800302e:	f7fe f833 	bl	8001098 <Uart_SendString>
		xSemaphoreGive(mxRes);
 8003032:	4b04      	ldr	r3, [pc, #16]	; (8003044 <T_SMS+0x40>)
 8003034:	6818      	ldr	r0, [r3, #0]
 8003036:	2300      	movs	r3, #0
 8003038:	2200      	movs	r2, #0
 800303a:	2100      	movs	r1, #0
 800303c:	f7fe fda4 	bl	8001b88 <xQueueGenericSend>
		if(xSemaphoreTake(mxRes,portMAX_DELAY)){//portMAX_DELAY give me the max delay out time
 8003040:	e7e4      	b.n	800300c <T_SMS+0x8>
 8003042:	bf00      	nop
 8003044:	20003dec 	.word	0x20003dec
 8003048:	08003430 	.word	0x08003430
 800304c:	40004400 	.word	0x40004400
 8003050:	08003440 	.word	0x08003440

08003054 <T_Server>:
}



//event task , always in wating untill event is occure
void T_Server(void* pvData){
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]

	while(1){
		if(xSemaphoreTake(mxRes,portMAX_DELAY)){
 800305c:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <T_Server+0x44>)
 800305e:	6818      	ldr	r0, [r3, #0]
 8003060:	2300      	movs	r3, #0
 8003062:	f04f 32ff 	mov.w	r2, #4294967295
 8003066:	2100      	movs	r1, #0
 8003068:	f7fe fe88 	bl	8001d7c <xQueueGenericReceive>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00e      	beq.n	8003090 <T_Server+0x3c>
		Uart_SendString(USART2," AT+server1...\n");
 8003072:	490a      	ldr	r1, [pc, #40]	; (800309c <T_Server+0x48>)
 8003074:	480a      	ldr	r0, [pc, #40]	; (80030a0 <T_Server+0x4c>)
 8003076:	f7fe f80f 	bl	8001098 <Uart_SendString>
		Uart_SendString(USART2," AT+server2...\n");
 800307a:	490a      	ldr	r1, [pc, #40]	; (80030a4 <T_Server+0x50>)
 800307c:	4808      	ldr	r0, [pc, #32]	; (80030a0 <T_Server+0x4c>)
 800307e:	f7fe f80b 	bl	8001098 <Uart_SendString>
		//vTaskDelay(5);//os delay 250 tick
		xSemaphoreGive(mxRes);
 8003082:	4b05      	ldr	r3, [pc, #20]	; (8003098 <T_Server+0x44>)
 8003084:	6818      	ldr	r0, [r3, #0]
 8003086:	2300      	movs	r3, #0
 8003088:	2200      	movs	r2, #0
 800308a:	2100      	movs	r1, #0
 800308c:	f7fe fd7c 	bl	8001b88 <xQueueGenericSend>
		}
		vTaskDelay(5);
 8003090:	2005      	movs	r0, #5
 8003092:	f7ff f9bf 	bl	8002414 <vTaskDelay>
		if(xSemaphoreTake(mxRes,portMAX_DELAY)){
 8003096:	e7e1      	b.n	800305c <T_Server+0x8>
 8003098:	20003dec 	.word	0x20003dec
 800309c:	08003450 	.word	0x08003450
 80030a0:	40004400 	.word	0x40004400
 80030a4:	08003460 	.word	0x08003460

080030a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80030a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80030ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80030ae:	e003      	b.n	80030b8 <LoopCopyDataInit>

080030b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80030b0:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80030b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80030b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80030b6:	3104      	adds	r1, #4

080030b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80030b8:	480b      	ldr	r0, [pc, #44]	; (80030e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80030ba:	4b0c      	ldr	r3, [pc, #48]	; (80030ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80030bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80030be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80030c0:	d3f6      	bcc.n	80030b0 <CopyDataInit>
  ldr  r2, =_sbss
 80030c2:	4a0b      	ldr	r2, [pc, #44]	; (80030f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80030c4:	e002      	b.n	80030cc <LoopFillZerobss>

080030c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80030c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80030c8:	f842 3b04 	str.w	r3, [r2], #4

080030cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80030cc:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80030ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80030d0:	d3f9      	bcc.n	80030c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80030d2:	f000 f833 	bl	800313c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030d6:	f000 f95f 	bl	8003398 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030da:	f7ff ff45 	bl	8002f68 <main>
  bx  lr    
 80030de:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80030e0:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80030e4:	08003478 	.word	0x08003478
  ldr  r0, =_sdata
 80030e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80030ec:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 80030f0:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 80030f4:	20003e08 	.word	0x20003e08

080030f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030f8:	e7fe      	b.n	80030f8 <ADC_IRQHandler>

080030fa <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80030fa:	b480      	push	{r7}
 80030fc:	af00      	add	r7, sp, #0
}
 80030fe:	bf00      	nop
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800310c:	e7fe      	b.n	800310c <HardFault_Handler+0x4>

0800310e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800310e:	b480      	push	{r7}
 8003110:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8003112:	e7fe      	b.n	8003112 <MemManage_Handler+0x4>

08003114 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8003118:	e7fe      	b.n	8003118 <BusFault_Handler+0x4>

0800311a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800311a:	b480      	push	{r7}
 800311c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800311e:	e7fe      	b.n	800311e <UsageFault_Handler+0x4>

08003120 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
}
 8003124:	bf00      	nop
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
	osSystickHandler();
 8003132:	f7fd ffce 	bl	80010d2 <osSystickHandler>
}
 8003136:	bf00      	nop
 8003138:	bd80      	pop	{r7, pc}
	...

0800313c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003140:	4a16      	ldr	r2, [pc, #88]	; (800319c <SystemInit+0x60>)
 8003142:	4b16      	ldr	r3, [pc, #88]	; (800319c <SystemInit+0x60>)
 8003144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003148:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800314c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003150:	4a13      	ldr	r2, [pc, #76]	; (80031a0 <SystemInit+0x64>)
 8003152:	4b13      	ldr	r3, [pc, #76]	; (80031a0 <SystemInit+0x64>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800315c:	4b10      	ldr	r3, [pc, #64]	; (80031a0 <SystemInit+0x64>)
 800315e:	2200      	movs	r2, #0
 8003160:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003162:	4a0f      	ldr	r2, [pc, #60]	; (80031a0 <SystemInit+0x64>)
 8003164:	4b0e      	ldr	r3, [pc, #56]	; (80031a0 <SystemInit+0x64>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800316c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003170:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003172:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <SystemInit+0x64>)
 8003174:	4a0b      	ldr	r2, [pc, #44]	; (80031a4 <SystemInit+0x68>)
 8003176:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003178:	4a09      	ldr	r2, [pc, #36]	; (80031a0 <SystemInit+0x64>)
 800317a:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <SystemInit+0x64>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003182:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003184:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <SystemInit+0x64>)
 8003186:	2200      	movs	r2, #0
 8003188:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800318a:	f000 f889 	bl	80032a0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800318e:	4b03      	ldr	r3, [pc, #12]	; (800319c <SystemInit+0x60>)
 8003190:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003194:	609a      	str	r2, [r3, #8]
#endif
}
 8003196:	bf00      	nop
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	e000ed00 	.word	0xe000ed00
 80031a0:	40023800 	.word	0x40023800
 80031a4:	24003010 	.word	0x24003010

080031a8 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b087      	sub	sp, #28
 80031ac:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80031ae:	2300      	movs	r3, #0
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]
 80031b6:	2302      	movs	r3, #2
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	2300      	movs	r3, #0
 80031bc:	60bb      	str	r3, [r7, #8]
 80031be:	2302      	movs	r3, #2
 80031c0:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80031c2:	4b32      	ldr	r3, [pc, #200]	; (800328c <SystemCoreClockUpdate+0xe4>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 030c 	and.w	r3, r3, #12
 80031ca:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d007      	beq.n	80031e2 <SystemCoreClockUpdate+0x3a>
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	d009      	beq.n	80031ea <SystemCoreClockUpdate+0x42>
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d13d      	bne.n	8003256 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80031da:	4b2d      	ldr	r3, [pc, #180]	; (8003290 <SystemCoreClockUpdate+0xe8>)
 80031dc:	4a2d      	ldr	r2, [pc, #180]	; (8003294 <SystemCoreClockUpdate+0xec>)
 80031de:	601a      	str	r2, [r3, #0]
      break;
 80031e0:	e03d      	b.n	800325e <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80031e2:	4b2b      	ldr	r3, [pc, #172]	; (8003290 <SystemCoreClockUpdate+0xe8>)
 80031e4:	4a2c      	ldr	r2, [pc, #176]	; (8003298 <SystemCoreClockUpdate+0xf0>)
 80031e6:	601a      	str	r2, [r3, #0]
      break;
 80031e8:	e039      	b.n	800325e <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80031ea:	4b28      	ldr	r3, [pc, #160]	; (800328c <SystemCoreClockUpdate+0xe4>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	0d9b      	lsrs	r3, r3, #22
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031f6:	4b25      	ldr	r3, [pc, #148]	; (800328c <SystemCoreClockUpdate+0xe4>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031fe:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00c      	beq.n	8003220 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003206:	4a24      	ldr	r2, [pc, #144]	; (8003298 <SystemCoreClockUpdate+0xf0>)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	fbb2 f3f3 	udiv	r3, r2, r3
 800320e:	4a1f      	ldr	r2, [pc, #124]	; (800328c <SystemCoreClockUpdate+0xe4>)
 8003210:	6852      	ldr	r2, [r2, #4]
 8003212:	0992      	lsrs	r2, r2, #6
 8003214:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003218:	fb02 f303 	mul.w	r3, r2, r3
 800321c:	617b      	str	r3, [r7, #20]
 800321e:	e00b      	b.n	8003238 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003220:	4a1c      	ldr	r2, [pc, #112]	; (8003294 <SystemCoreClockUpdate+0xec>)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	fbb2 f3f3 	udiv	r3, r2, r3
 8003228:	4a18      	ldr	r2, [pc, #96]	; (800328c <SystemCoreClockUpdate+0xe4>)
 800322a:	6852      	ldr	r2, [r2, #4]
 800322c:	0992      	lsrs	r2, r2, #6
 800322e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003232:	fb02 f303 	mul.w	r3, r2, r3
 8003236:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003238:	4b14      	ldr	r3, [pc, #80]	; (800328c <SystemCoreClockUpdate+0xe4>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	0c1b      	lsrs	r3, r3, #16
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	3301      	adds	r3, #1
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003250:	4a0f      	ldr	r2, [pc, #60]	; (8003290 <SystemCoreClockUpdate+0xe8>)
 8003252:	6013      	str	r3, [r2, #0]
      break;
 8003254:	e003      	b.n	800325e <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8003256:	4b0e      	ldr	r3, [pc, #56]	; (8003290 <SystemCoreClockUpdate+0xe8>)
 8003258:	4a0e      	ldr	r2, [pc, #56]	; (8003294 <SystemCoreClockUpdate+0xec>)
 800325a:	601a      	str	r2, [r3, #0]
      break;
 800325c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800325e:	4b0b      	ldr	r3, [pc, #44]	; (800328c <SystemCoreClockUpdate+0xe4>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	091b      	lsrs	r3, r3, #4
 8003264:	f003 030f 	and.w	r3, r3, #15
 8003268:	4a0c      	ldr	r2, [pc, #48]	; (800329c <SystemCoreClockUpdate+0xf4>)
 800326a:	5cd3      	ldrb	r3, [r2, r3]
 800326c:	b2db      	uxtb	r3, r3
 800326e:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8003270:	4b07      	ldr	r3, [pc, #28]	; (8003290 <SystemCoreClockUpdate+0xe8>)
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	fa22 f303 	lsr.w	r3, r2, r3
 800327a:	4a05      	ldr	r2, [pc, #20]	; (8003290 <SystemCoreClockUpdate+0xe8>)
 800327c:	6013      	str	r3, [r2, #0]
}
 800327e:	bf00      	nop
 8003280:	371c      	adds	r7, #28
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	40023800 	.word	0x40023800
 8003290:	20000004 	.word	0x20000004
 8003294:	00f42400 	.word	0x00f42400
 8003298:	017d7840 	.word	0x017d7840
 800329c:	20000008 	.word	0x20000008

080032a0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80032a6:	2300      	movs	r3, #0
 80032a8:	607b      	str	r3, [r7, #4]
 80032aa:	2300      	movs	r3, #0
 80032ac:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80032ae:	4a36      	ldr	r2, [pc, #216]	; (8003388 <SetSysClock+0xe8>)
 80032b0:	4b35      	ldr	r3, [pc, #212]	; (8003388 <SetSysClock+0xe8>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80032ba:	4b33      	ldr	r3, [pc, #204]	; (8003388 <SetSysClock+0xe8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3301      	adds	r3, #1
 80032c8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d103      	bne.n	80032d8 <SetSysClock+0x38>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80032d6:	d1f0      	bne.n	80032ba <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80032d8:	4b2b      	ldr	r3, [pc, #172]	; (8003388 <SetSysClock+0xe8>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80032e4:	2301      	movs	r3, #1
 80032e6:	603b      	str	r3, [r7, #0]
 80032e8:	e001      	b.n	80032ee <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80032ea:	2300      	movs	r3, #0
 80032ec:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d142      	bne.n	800337a <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80032f4:	4a24      	ldr	r2, [pc, #144]	; (8003388 <SetSysClock+0xe8>)
 80032f6:	4b24      	ldr	r3, [pc, #144]	; (8003388 <SetSysClock+0xe8>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032fe:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8003300:	4a22      	ldr	r2, [pc, #136]	; (800338c <SetSysClock+0xec>)
 8003302:	4b22      	ldr	r3, [pc, #136]	; (800338c <SetSysClock+0xec>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800330a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800330c:	4a1e      	ldr	r2, [pc, #120]	; (8003388 <SetSysClock+0xe8>)
 800330e:	4b1e      	ldr	r3, [pc, #120]	; (8003388 <SetSysClock+0xe8>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003314:	4a1c      	ldr	r2, [pc, #112]	; (8003388 <SetSysClock+0xe8>)
 8003316:	4b1c      	ldr	r3, [pc, #112]	; (8003388 <SetSysClock+0xe8>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800331e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003320:	4a19      	ldr	r2, [pc, #100]	; (8003388 <SetSysClock+0xe8>)
 8003322:	4b19      	ldr	r3, [pc, #100]	; (8003388 <SetSysClock+0xe8>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800332a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800332c:	4b16      	ldr	r3, [pc, #88]	; (8003388 <SetSysClock+0xe8>)
 800332e:	4a18      	ldr	r2, [pc, #96]	; (8003390 <SetSysClock+0xf0>)
 8003330:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003332:	4a15      	ldr	r2, [pc, #84]	; (8003388 <SetSysClock+0xe8>)
 8003334:	4b14      	ldr	r3, [pc, #80]	; (8003388 <SetSysClock+0xe8>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800333c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800333e:	bf00      	nop
 8003340:	4b11      	ldr	r3, [pc, #68]	; (8003388 <SetSysClock+0xe8>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0f9      	beq.n	8003340 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800334c:	4b11      	ldr	r3, [pc, #68]	; (8003394 <SetSysClock+0xf4>)
 800334e:	f240 7205 	movw	r2, #1797	; 0x705
 8003352:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003354:	4a0c      	ldr	r2, [pc, #48]	; (8003388 <SetSysClock+0xe8>)
 8003356:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <SetSysClock+0xe8>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f023 0303 	bic.w	r3, r3, #3
 800335e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003360:	4a09      	ldr	r2, [pc, #36]	; (8003388 <SetSysClock+0xe8>)
 8003362:	4b09      	ldr	r3, [pc, #36]	; (8003388 <SetSysClock+0xe8>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f043 0302 	orr.w	r3, r3, #2
 800336a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800336c:	bf00      	nop
 800336e:	4b06      	ldr	r3, [pc, #24]	; (8003388 <SetSysClock+0xe8>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
 8003376:	2b08      	cmp	r3, #8
 8003378:	d1f9      	bne.n	800336e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	40023800 	.word	0x40023800
 800338c:	40007000 	.word	0x40007000
 8003390:	07405419 	.word	0x07405419
 8003394:	40023c00 	.word	0x40023c00

08003398 <__libc_init_array>:
 8003398:	b570      	push	{r4, r5, r6, lr}
 800339a:	4e0d      	ldr	r6, [pc, #52]	; (80033d0 <__libc_init_array+0x38>)
 800339c:	4c0d      	ldr	r4, [pc, #52]	; (80033d4 <__libc_init_array+0x3c>)
 800339e:	1ba4      	subs	r4, r4, r6
 80033a0:	10a4      	asrs	r4, r4, #2
 80033a2:	2500      	movs	r5, #0
 80033a4:	42a5      	cmp	r5, r4
 80033a6:	d109      	bne.n	80033bc <__libc_init_array+0x24>
 80033a8:	4e0b      	ldr	r6, [pc, #44]	; (80033d8 <__libc_init_array+0x40>)
 80033aa:	4c0c      	ldr	r4, [pc, #48]	; (80033dc <__libc_init_array+0x44>)
 80033ac:	f000 f824 	bl	80033f8 <_init>
 80033b0:	1ba4      	subs	r4, r4, r6
 80033b2:	10a4      	asrs	r4, r4, #2
 80033b4:	2500      	movs	r5, #0
 80033b6:	42a5      	cmp	r5, r4
 80033b8:	d105      	bne.n	80033c6 <__libc_init_array+0x2e>
 80033ba:	bd70      	pop	{r4, r5, r6, pc}
 80033bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033c0:	4798      	blx	r3
 80033c2:	3501      	adds	r5, #1
 80033c4:	e7ee      	b.n	80033a4 <__libc_init_array+0xc>
 80033c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033ca:	4798      	blx	r3
 80033cc:	3501      	adds	r5, #1
 80033ce:	e7f2      	b.n	80033b6 <__libc_init_array+0x1e>
 80033d0:	08003470 	.word	0x08003470
 80033d4:	08003470 	.word	0x08003470
 80033d8:	08003470 	.word	0x08003470
 80033dc:	08003474 	.word	0x08003474

080033e0 <memcpy>:
 80033e0:	b510      	push	{r4, lr}
 80033e2:	1e43      	subs	r3, r0, #1
 80033e4:	440a      	add	r2, r1
 80033e6:	4291      	cmp	r1, r2
 80033e8:	d100      	bne.n	80033ec <memcpy+0xc>
 80033ea:	bd10      	pop	{r4, pc}
 80033ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033f4:	e7f7      	b.n	80033e6 <memcpy+0x6>
	...

080033f8 <_init>:
 80033f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fa:	bf00      	nop
 80033fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033fe:	bc08      	pop	{r3}
 8003400:	469e      	mov	lr, r3
 8003402:	4770      	bx	lr

08003404 <_fini>:
 8003404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003406:	bf00      	nop
 8003408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800340a:	bc08      	pop	{r3}
 800340c:	469e      	mov	lr, r3
 800340e:	4770      	bx	lr
